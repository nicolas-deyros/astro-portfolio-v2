---
interface Props {
	className?: string
	markdown?: string
}

const { className = '', markdown = '' } = Astro.props
---

<div class={`blog-summarizer ${className}`} data-markdown={markdown}>
	<button
		id="summarize-btn"
		class="flex w-full items-center justify-center gap-2 rounded-lg border border-gray-300 bg-white px-4 py-3 text-sm font-medium text-gray-700 shadow-sm transition-all duration-200 hover:border-gray-400 hover:bg-gray-50 hover:shadow-md focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:border-gray-500 dark:hover:bg-gray-700">
		<svg
			class="h-5 w-5"
			fill="none"
			stroke="currentColor"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg">
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z">
			</path>
		</svg>
		<span id="summarize-btn-text">Summarize Article</span>
	</button>

	<!-- AI Not Supported Dialog -->
	<dialog
		id="ai-not-supported-dialog"
		class="fixed top-1/2 left-1/2 z-50 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 rounded-xl border border-slate-200 bg-white p-8 shadow-2xl dark:border-slate-700 dark:bg-slate-900">
		<form method="dialog" class="flex flex-col items-center">
			<div class="mb-4 flex items-center gap-3">
				<svg
					class="h-6 w-6 text-red-500 dark:text-red-400"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M12 9v2m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z">
					</path>
				</svg>
				<span class="text-lg font-semibold text-slate-900 dark:text-slate-100">
					Chrome AI Not Available
				</span>
			</div>
			<div
				id="ai-error-message"
				class="mb-6 max-h-64 overflow-y-auto text-sm text-slate-700 dark:text-slate-300">
			</div>
			<button
				class="rounded-md bg-blue-600 px-6 py-2 text-base font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-blue-500 dark:hover:bg-blue-400 dark:focus:ring-offset-slate-900"
				value="close">
				OK
			</button>
		</form>
	</dialog>

	<!-- Summary Modal -->
	<dialog
		id="summary-modal"
		class="fixed top-1/2 left-1/2 z-50 h-[90vh] w-full max-w-4xl -translate-x-1/2 -translate-y-1/2 overflow-hidden rounded-xl border border-slate-200 bg-white shadow-2xl dark:border-slate-700 dark:bg-slate-900">
		<form method="dialog" class="flex h-full flex-col">
			<!-- Header -->
			<div
				class="flex items-center justify-between border-b border-gray-200 px-6 py-4 dark:border-gray-700">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
					Article Summary
				</h3>
				<button
					value="close"
					class="rounded-full p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700 dark:hover:text-gray-300">
					<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
						<path
							fill-rule="evenodd"
							d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
							clip-rule="evenodd">
						</path>
					</svg>
				</button>
			</div>

			<!-- Content -->
			<div class="flex-1 overflow-y-auto px-6 py-4">
				<!-- Summary Type Selector -->
				<div class="mb-4">
					<label
						class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
						Summary Type:
					</label>
					<div class="grid grid-cols-2 gap-2 md:grid-cols-4">
						<button
							type="button"
							class="summary-type-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-type="tl;dr">
							TL;DR
						</button>
						<button
							type="button"
							class="summary-type-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-type="key-points">
							Key Points
						</button>
						<button
							type="button"
							class="summary-type-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-type="teaser">
							Teaser
						</button>
						<button
							type="button"
							class="summary-type-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-type="headline">
							Headline
						</button>
					</div>
				</div>

				<!-- Length Selector -->
				<div class="mb-4">
					<label
						class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
						Length:
					</label>
					<div class="grid grid-cols-3 gap-2">
						<button
							type="button"
							class="summary-length-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-length="short">
							Short
						</button>
						<button
							type="button"
							class="summary-length-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-length="medium">
							Medium
						</button>
						<button
							type="button"
							class="summary-length-btn rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700"
							data-length="long">
							Long
						</button>
					</div>
				</div>

				<!-- Generate Button -->
				<button
					type="button"
					id="generate-summary-btn"
					class="mb-4 w-full rounded-lg bg-blue-600 px-4 py-3 text-sm font-medium text-white transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50">
					<span id="generate-btn-text">Generate Summary</span>
				</button>

				<!-- Progress -->
				<div id="summary-progress" class="mb-4 hidden">
					<div class="mb-2 flex items-center justify-between">
						<span
							id="progress-text"
							class="text-sm text-gray-600 dark:text-gray-400">
							Initializing...
						</span>
					</div>
					<div class="h-2 w-full rounded-full bg-gray-200 dark:bg-gray-700">
						<div
							id="progress-fill"
							class="h-2 rounded-full bg-blue-600 transition-all duration-300"
							style="width: 0%">
						</div>
					</div>
				</div>

				<!-- Error Display -->
				<div
					id="summary-error"
					class="mb-4 hidden rounded-lg bg-red-50 p-4 dark:bg-red-900/20">
					<div class="flex items-start">
						<svg
							class="mt-0.5 mr-3 h-5 w-5 text-red-400"
							fill="currentColor"
							viewBox="0 0 20 20">
							<path
								fill-rule="evenodd"
								d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
								clip-rule="evenodd">
							</path>
						</svg>
						<div>
							<h4 class="text-sm font-medium text-red-800 dark:text-red-200">
								Summary Failed
							</h4>
							<p
								id="error-message"
								class="mt-1 text-sm text-red-700 dark:text-red-300">
							</p>
						</div>
					</div>
				</div>

				<!-- Summary Result -->
				<div id="summary-result" class="hidden">
					<div
						class="mb-4 rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-900">
						<div class="mb-2 flex items-center justify-between">
							<h4 class="font-medium text-gray-900 dark:text-white">
								<span id="summary-type-display">TL;DR</span> Summary
							</h4>
							<span
								id="summary-meta"
								class="text-xs text-gray-500 dark:text-gray-400">
							</span>
						</div>
						<div
							id="summary-content"
							class="prose prose-sm dark:prose-invert max-w-none text-gray-700 dark:text-gray-300">
						</div>
					</div>
				</div>
			</div>
		</form>
	</dialog>
</div>

<script>
	console.log('BlogSummarizer script loading...')

	function initializeBlogSummarizer(): (() => void) | null {
		console.log('Initializing blog summarizer...')

		const summarizeBtn = document.getElementById(
			'summarize-btn',
		) as HTMLButtonElement
		const summaryModal = document.getElementById(
			'summary-modal',
		) as HTMLDialogElement
		const aiNotSupportedDialog = document.getElementById(
			'ai-not-supported-dialog',
		) as HTMLDialogElement

		if (!summarizeBtn || !summaryModal || !aiNotSupportedDialog) {
			console.warn('Summarizer elements not found')
			return null
		}

		const handleSummarizeClick = async (): Promise<void> => {
			console.log('Summarize button clicked!')
			console.log('Checking Chrome AI Summarizer availability...')
			console.log(
				'window.Summarizer:',
				(window as typeof window & { Summarizer?: unknown }).Summarizer,
			)

			// Check if Chrome AI Summarizer is available
			const summarizerWindow = window as typeof window & {
				Summarizer?: {
					availability(): Promise<'available' | 'downloadable' | 'no'>
				}
			}

			if (!summarizerWindow.Summarizer) {
				showAINotSupportedDialog(
					'Chrome AI Summarizer is not available. You need Chrome 129+ with experimental AI features enabled.',
				)
				return
			}

			try {
				// Check availability using the correct API
				const availability = await summarizerWindow.Summarizer.availability()
				console.log('Summarizer availability:', availability)

				if (availability === 'no') {
					showAINotSupportedDialog(
						'Chrome AI Summarizer is not available on this device. Please enable the Summarizer API in Chrome flags.',
					)
					return
				}

				console.log('Chrome AI Summarizer detected!')
				summaryModal.showModal()
			} catch (error) {
				console.error('Error checking summarizer availability:', error)
				showAINotSupportedDialog(
					'Error accessing Chrome AI Summarizer. Please check your Chrome flags configuration.',
				)
			}
		}

		const showAINotSupportedDialog = (message: string): void => {
			const detailedMessage = `${message}

To enable Chrome AI Summarizer:

1. Open Chrome and go to: chrome://flags/
2. Enable these flags:
   • #optimization-guide-on-device-model
   • #summarization-api-for-gemini-nano
3. Restart Chrome
4. Visit chrome://components/ and update "Optimization Guide On Device Model"

Alternative: Use Chrome Canary or Dev channel for better AI support.`

			const messageEl = document.getElementById('ai-error-message')
			if (messageEl) {
				messageEl.innerHTML = detailedMessage.replace(/\n/g, '<br>')
			}
			aiNotSupportedDialog.showModal()
		}

		// Add summary generation functionality
		const initializeSummaryModal = (): void => {
			console.log('Initializing summary modal...')

			const summaryTypeBtns = summaryModal.querySelectorAll('.summary-type-btn')
			const summaryLengthBtns = summaryModal.querySelectorAll(
				'.summary-length-btn',
			)
			const generateBtn = document.getElementById(
				'generate-summary-btn',
			) as HTMLButtonElement
			const progressContainer = document.getElementById('summary-progress')
			const progressText = document.getElementById('progress-text')
			const progressFill = document.getElementById('progress-fill')
			const errorContainer = document.getElementById('summary-error')
			const errorMessage = document.getElementById('error-message')
			const resultContainer = document.getElementById('summary-result')
			const summaryContent = document.getElementById('summary-content')
			const summaryTypeDisplay = document.getElementById('summary-type-display')
			const summaryMeta = document.getElementById('summary-meta')

			let selectedType = 'tl;dr'
			let selectedLength = 'medium'

			// Handle summary type selection
			summaryTypeBtns.forEach(btn => {
				btn.addEventListener('click', e => {
					e.preventDefault()
					e.stopPropagation()
					summaryTypeBtns.forEach(b =>
						b.classList.remove('bg-blue-600', 'text-white'),
					)
					btn.classList.add('bg-blue-600', 'text-white')
					selectedType = btn.getAttribute('data-type') || 'tl;dr'
				})
			})

			// Handle length selection
			summaryLengthBtns.forEach(btn => {
				btn.addEventListener('click', e => {
					e.preventDefault()
					e.stopPropagation()
					summaryLengthBtns.forEach(b =>
						b.classList.remove('bg-blue-600', 'text-white'),
					)
					btn.classList.add('bg-blue-600', 'text-white')
					selectedLength = btn.getAttribute('data-length') || 'medium'
				})
			})

			// Set default selections
			summaryTypeBtns[0]?.classList.add('bg-blue-600', 'text-white')
			summaryLengthBtns[1]?.classList.add('bg-blue-600', 'text-white')

			// Handle generate summary
			generateBtn?.addEventListener('click', async e => {
				e.preventDefault()
				e.stopPropagation()

				console.log('Generate summary button clicked!')
				console.log('Selected type:', selectedType)
				console.log('Selected length:', selectedLength)

				if (
					!generateBtn ||
					!progressContainer ||
					!progressText ||
					!progressFill
				) {
					console.error('Missing required elements')
					return
				}

				// Hide previous results and errors
				errorContainer?.classList.add('hidden')
				resultContainer?.classList.add('hidden')
				progressContainer.classList.remove('hidden')

				generateBtn.disabled = true
				generateBtn.textContent = 'Generating...'

				try {
					// Get the markdown content from the data attribute or fallback to rendered content
					const summarizerContainer = document.querySelector(
						'.blog-summarizer',
					) as HTMLElement
					let contentToSummarize = summarizerContainer?.dataset.markdown || ''

					console.log(
						'Markdown from data attribute:',
						contentToSummarize ? 'Found' : 'Not found',
					)

					// Fallback to rendered content if no markdown provided
					if (!contentToSummarize.trim()) {
						const blogContentElement = document.getElementById('blog-content')
						contentToSummarize =
							blogContentElement?.textContent ||
							document.querySelector('article')?.textContent ||
							document.querySelector('main')?.textContent ||
							''
						console.log('Fallback content length:', contentToSummarize.length)
					}

					if (!contentToSummarize.trim()) {
						throw new Error('No blog content found to summarize')
					}

					console.log('Content to summarize length:', contentToSummarize.length)
					console.log(
						'Content preview:',
						contentToSummarize.substring(0, 200) + '...',
					)

					// Import and use the BlogSummarizer
					console.log('Attempting to import BlogSummarizer...')
					const { BlogSummarizer } = await import('../../utils/summarizer.js')
					console.log('BlogSummarizer imported successfully')

					const summarizer = new BlogSummarizer()
					console.log('BlogSummarizer instance created')

					const result = await summarizer.summarizeBlogPost(
						contentToSummarize,
						{
							type: selectedType as
								| 'tl;dr'
								| 'key-points'
								| 'teaser'
								| 'headline',
							length: selectedLength as 'short' | 'medium' | 'long',
						},
						(status: string) => {
							if (progressText) progressText.textContent = status
							// Simple progress animation
							const currentWidth = parseInt(progressFill?.style.width || '0')
							const newWidth = Math.min(currentWidth + 20, 90)
							if (progressFill) progressFill.style.width = `${newWidth}%`
						},
					)

					// Show results
					if (progressFill) progressFill.style.width = '100%'
					if (progressText) progressText.textContent = 'Summary generated!'

					setTimeout(() => {
						progressContainer.classList.add('hidden')
						resultContainer?.classList.remove('hidden')

						if (summaryContent) summaryContent.textContent = result.summary
						if (summaryTypeDisplay)
							summaryTypeDisplay.textContent = selectedType.toUpperCase()
						if (summaryMeta) {
							summaryMeta.textContent = `${result.wordCount} words • ${selectedLength} • ${new Date(result.timestamp).toLocaleTimeString()}`
						}
					}, 500)
				} catch (error) {
					console.error('Summary generation failed:', error)
					progressContainer.classList.add('hidden')
					errorContainer?.classList.remove('hidden')
					if (errorMessage) {
						errorMessage.textContent =
							error instanceof Error
								? error.message
								: 'An unexpected error occurred'
					}
				} finally {
					generateBtn.disabled = false
					generateBtn.textContent = 'Generate Summary'
					if (progressFill) progressFill.style.width = '0%'
				}
			})
		}

		// Initialize the summary modal functionality immediately
		initializeSummaryModal()

		summarizeBtn.addEventListener('click', handleSummarizeClick)

		// Add click outside to close behavior for dialogs
		const addDialogOutsideClickHandler = (dialog: HTMLDialogElement): void => {
			dialog.addEventListener('click', e => {
				const rect = dialog.getBoundingClientRect()
				if (
					e.clientX < rect.left ||
					e.clientX > rect.right ||
					e.clientY < rect.top ||
					e.clientY > rect.bottom
				) {
					dialog.close()
				}
			})
		}

		addDialogOutsideClickHandler(summaryModal)
		addDialogOutsideClickHandler(aiNotSupportedDialog)

		return (): void => {
			summarizeBtn.removeEventListener('click', handleSummarizeClick)
		}
	}

	// Enhanced cleanup for Astro view transitions
	let summarizerCleanup: (() => void) | null = null

	// Clean up before navigation
	document.addEventListener('astro:before-preparation', () => {
		if (summarizerCleanup) {
			summarizerCleanup()
			summarizerCleanup = null
		}
	})

	// Initialize on Astro page load
	document.addEventListener('astro:page-load', () => {
		if (summarizerCleanup) summarizerCleanup()
		setTimeout(() => {
			summarizerCleanup = initializeBlogSummarizer()
		}, 100)
	})

	// Fallback for direct page loads
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			setTimeout(() => {
				if (!summarizerCleanup) {
					summarizerCleanup = initializeBlogSummarizer()
				}
			}, 100)
		})
	} else {
		setTimeout(() => {
			if (!summarizerCleanup) {
				summarizerCleanup = initializeBlogSummarizer()
			}
		}, 50)
	}
</script>
