---
import { Icon } from 'astro-icon/components'
import NavList from '@components/List/NavList.astro'
import navData from '@data/navData'

type NavItem = {
	path: string
	icon: string
	text: string
}
---

<!-- Mobile Menu Button -->
<button
	id="mobile-menu-button"
	class="flex items-center rounded-md px-3 py-2 text-gray-500 hover:text-gray-700 focus:ring-2 focus:ring-blue-500 focus:outline-none lg:hidden dark:text-gray-400 dark:hover:text-gray-200"
	aria-label="Toggle navigation menu"
	aria-expanded="false">
	<!-- Hamburger Icon -->
	<svg
		id="hamburger-icon"
		class="h-6 w-6 transition-transform duration-300"
		fill="none"
		stroke="currentColor"
		viewBox="0 0 24 24">
		<path
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="2"
			d="M4 6h16M4 12h16M4 18h16">
		</path>
	</svg>
	<!-- Close Icon -->
	<svg
		id="close-icon"
		class="hidden h-6 w-6 transition-transform duration-300"
		fill="none"
		stroke="currentColor"
		viewBox="0 0 24 24">
		<path
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="2"
			d="M6 18L18 6M6 6l12 12">
		</path>
	</svg>
</button>

<!-- Desktop Navigation -->
<nav class="hidden lg:flex lg:gap-3">
	{
		navData.map((item: NavItem) => (
			<NavList
				href={item.path}
				icon={item.icon}
				text={item.text}
				title={item.text}
				data-navLink
			/>
		))
	}
	<label
		id="toggle-theme"
		for="theme-toggle-checkbox"
		class="relative inline-flex cursor-pointer items-center">
		<input
			type="checkbox"
			value=""
			id="theme-toggle-checkbox"
			class="peer sr-only"
		/>
		<div
			class="peer relative h-6 w-11 rounded-full bg-slate-200 peer-checked:bg-slate-800 peer-focus:ring-4 peer-focus:ring-slate-300 peer-focus:outline-none before:absolute before:top-[2px] before:left-[2px] before:flex before:h-5 before:w-5 before:items-center before:justify-center before:rounded-full before:border before:border-slate-300 before:bg-white before:text-xs before:text-yellow-600 before:transition-all before:duration-300 before:content-['☀'] peer-checked:before:translate-x-full peer-checked:before:border-white peer-checked:before:opacity-0 after:absolute after:top-[2px] after:left-[2px] after:flex after:h-5 after:w-5 after:items-center after:justify-center after:rounded-full after:border after:border-white after:bg-gray-900 after:text-xs after:text-blue-200 after:opacity-0 after:transition-all after:duration-300 after:content-['☽'] peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:after:opacity-100 dark:bg-gray-700 dark:peer-checked:bg-slate-200 dark:peer-focus:ring-slate-600 dark:before:border-gray-600 dark:before:bg-gray-300">
		</div>
	</label>
</nav>

<!-- Mobile Navigation Overlay -->
<div
	id="mobile-menu-overlay"
	class="invisible fixed inset-0 z-40 bg-black/50 opacity-0 backdrop-blur-sm transition-all duration-300 lg:hidden"
	aria-hidden="true">
</div>

<!-- Mobile Navigation Menu -->
<nav
	id="mobile-menu"
	class="fixed top-0 right-0 z-50 h-full w-80 max-w-[90vw] translate-x-full transform bg-white shadow-xl transition-transform duration-300 ease-in-out lg:hidden dark:bg-gray-900"
	aria-label="Mobile navigation">
	<!-- Mobile Menu Header -->
	<div
		class="flex items-center justify-between border-b border-gray-200 p-4 dark:border-gray-700">
		<button
			id="mobile-menu-close"
			class="rounded-md p-2 text-gray-500 hover:text-gray-700 focus:ring-2 focus:ring-blue-500 focus:outline-none dark:text-gray-400 dark:hover:text-gray-200"
			aria-label="Close menu">
			<svg
				class="h-6 w-6"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24">
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M6 18L18 6M6 6l12 12">
				</path>
			</svg>
		</button>
	</div>

	<!-- Mobile Menu Items -->
	<div class="flex flex-col space-y-2 p-4">
		{
			navData.map((item: NavItem) => (
				<a
					href={item.path}
					class="mobile-nav-link flex items-center gap-3 rounded-lg px-4 py-3 text-gray-700 transition-colors duration-200 hover:bg-gray-100 hover:text-blue-600 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-blue-400"
					data-navLink>
					<span class="text-xl">
						<Icon name={item.icon} class="h-5" />
					</span>
					<span class="font-medium">{item.text}</span>
				</a>
			))
		}
		<button
			id="toggle-theme"
			class="rounded border bg-slate-800 p-3 text-slate-200 dark:bg-slate-200 dark:text-slate-800">
			Tooggle Dark Theme
		</button>
	</div>
</nav>

<script>
	document.addEventListener('astro:page-load', () => {
		const mobileMenuButton = document.getElementById('mobile-menu-button')
		const mobileMenu = document.getElementById('mobile-menu')
		const mobileMenuOverlay = document.getElementById('mobile-menu-overlay')
		const mobileMenuClose = document.getElementById('mobile-menu-close')
		const hamburgerIcon = document.getElementById('hamburger-icon')
		const closeIcon = document.getElementById('close-icon')
		const mobileNavLinks = document.querySelectorAll('.mobile-nav-link')

		if (!mobileMenuButton || !mobileMenu || !mobileMenuOverlay) return

		function openMobileMenu() {
			if (mobileMenu) {
				mobileMenu.classList.remove('translate-x-full')
			}
			if (mobileMenuOverlay) {
				mobileMenuOverlay.classList.remove('opacity-0', 'invisible')
			}
			hamburgerIcon?.classList.add('hidden')
			closeIcon?.classList.remove('hidden')
			mobileMenuButton?.setAttribute('aria-expanded', 'true')
			document.body.classList.add('overflow-hidden')
		}

		function closeMobileMenu() {
			if (mobileMenu) {
				mobileMenu.classList.add('translate-x-full')
			}
			if (mobileMenuOverlay) {
				mobileMenuOverlay.classList.add('opacity-0', 'invisible')
			}
			hamburgerIcon?.classList.remove('hidden')
			closeIcon?.classList.add('hidden')
			mobileMenuButton?.setAttribute('aria-expanded', 'false')
			document.body.classList.remove('overflow-hidden')
		}

		// Toggle mobile menu
		mobileMenuButton.addEventListener('click', () => {
			const isOpen = !mobileMenu.classList.contains('translate-x-full')
			if (isOpen) {
				closeMobileMenu()
			} else {
				openMobileMenu()
			}
		})

		// Close menu when clicking overlay
		mobileMenuOverlay.addEventListener('click', closeMobileMenu)

		// Close menu when clicking close button
		mobileMenuClose?.addEventListener('click', closeMobileMenu)

		// Close menu when clicking nav links
		mobileNavLinks.forEach(link => {
			link.addEventListener('click', closeMobileMenu)
		})

		// Close menu on escape key
		document.addEventListener('keydown', e => {
			if (
				e.key === 'Escape' &&
				!mobileMenu.classList.contains('translate-x-full')
			) {
				closeMobileMenu()
			}
		})

		// Close menu on window resize to desktop size
		window.addEventListener('resize', () => {
			if (window.innerWidth >= 1024) {
				closeMobileMenu()
			}
		})
	})

	const themeToggleCheckbox = document.getElementById(
		'theme-toggle-checkbox',
	) as HTMLInputElement
	const htmlElement = document.documentElement

	// Initialize theme and checkbox state
	function initTheme() {
		const theme =
			localStorage.getItem('theme') ||
			(window.matchMedia('(prefers-color-scheme: dark)').matches
				? 'dark'
				: 'light')

		if (theme === 'dark') {
			htmlElement.classList.add('dark')
			if (themeToggleCheckbox) {
				themeToggleCheckbox.checked = true
			}
		} else {
			htmlElement.classList.remove('dark')
			if (themeToggleCheckbox) {
				themeToggleCheckbox.checked = false
			}
		}
	}

	// Initialize theme on load
	initTheme()

	if (themeToggleCheckbox) {
		themeToggleCheckbox.addEventListener('change', () => {
			if (themeToggleCheckbox.checked) {
				htmlElement.classList.add('dark')
				localStorage.setItem('theme', 'dark')
			} else {
				htmlElement.classList.remove('dark')
				localStorage.setItem('theme', 'light')
			}
		})
	}

	// Handle the old mobile toggle button (if it exists)
	const mobileThemeToggle = document.querySelector(
		'#mobile-menu button[id="toggle-theme"]',
	)
	if (mobileThemeToggle) {
		mobileThemeToggle.addEventListener('click', () => {
			const isDark = htmlElement.classList.contains('dark')
			if (isDark) {
				htmlElement.classList.remove('dark')
				localStorage.setItem('theme', 'light')
				if (themeToggleCheckbox) themeToggleCheckbox.checked = false
			} else {
				htmlElement.classList.add('dark')
				localStorage.setItem('theme', 'dark')
				if (themeToggleCheckbox) themeToggleCheckbox.checked = true
			}
		})
	}
</script>

<style>
	/* Smooth scrolling for mobile menu */
	@media (max-width: 1023px) {
		.mobile-nav-link {
			scroll-behavior: smooth;
		}
	}

	/* Prevent body scroll when mobile menu is open */
	body.overflow-hidden {
		overflow: hidden;
	}
</style>
