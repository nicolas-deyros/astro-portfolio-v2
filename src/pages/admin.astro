---
import Layout from '@layouts/index.astro'

const response = await fetch(`${Astro.url.origin}/api/links.json`)
const links = await response.json()

const API_SECRET_KEY = import.meta.env.API_SECRET_KEY;
---

<Layout title="Admin | Link Management">
	<main class="mx-auto max-w-4xl px-4 py-8">
		<div id="login-section">
			<h1 class="text-3xl font-bold">Admin Login</h1>
			<form id="login-form" class="mt-4 space-y-4">
				<div>
					<label for="secret-key" class="block text-sm font-medium text-gray-700">Secret Key</label>
					<input type="password" id="secret-key" name="secret-key" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
				</div>
				<button type="submit" class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">Login</button>
			</form>
		</div>

		<div id="admin-content" class="hidden">
			<h1 class="text-3xl font-bold">Link Management</h1>

			<div class="mt-8">
				<h2 class="text-2xl font-bold">Add New Link</h2>
				<form id="add-link-form" class="mt-4 space-y-4">
					<div>
						<label for="title" class="block text-sm font-medium text-gray-700">Title</label>
						<input type="text" id="title" name="title" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
					</div>
					<div>
						<label for="url" class="block text-sm font-medium text-gray-700">URL</label>
						<input type="url" id="url" name="url" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
					</div>
					<div>
						<label for="tags" class="block text-sm font-medium text-gray-700">Tags (comma-separated)</label>
						<input type="text" id="tags" name="tags" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
					</div>
					<div>
						<label for="date" class="block text-sm font-medium text-gray-700">Date</label>
						<input type="date" id="date" name="date" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
					</div>
					<button type="submit" class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">Add Link</button>
				</form>
			</div>

			<div class="mt-12">
				<h2 class="text-2xl font-bold">Existing Links</h2>
				<div class="mt-4 overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Title</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">URL</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Tags</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Date</th>
								<th scope="col" class="relative px-6 py-3">
									<span class="sr-only">Actions</span>
								</th>
							</tr>
						</thead>
						<tbody id="links-table-body" class="divide-y divide-gray-200 bg-white">
							{links.map(link => (
								<tr data-id={link.id}>
									<td class="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">{link.title}</td>
									<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
										<a href={link.url} target="_blank" rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-900">{link.url}</a>
									</td>
									<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">{link.tags}</td>
									<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">{link.date}</td>
									<td class="whitespace-nowrap px-6 py-4 text-right text-sm font-medium">
										<button class="text-indigo-600 hover:text-indigo-900">Edit</button>
										<button class="delete-btn ml-4 text-red-600 hover:text-red-900" data-id={link.id}>Delete</button>
									</td>
								</tr>
							))}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</main>

	<script define:vars={{ API_SECRET_KEY }}>
		document.addEventListener('astro:page-load', () => {
			const loginSection = document.getElementById('login-section');
			const adminContent = document.getElementById('admin-content');
			const loginForm = document.getElementById('login-form');
			const secretKeyInput = document.getElementById('secret-key');

			function showAdminContent() {
				loginSection.classList.add('hidden');
				adminContent.classList.remove('hidden');
			}

			// Check for key on page load
			const storedKey = localStorage.getItem('api_secret_key');
			if (storedKey === API_SECRET_KEY) {
				showAdminContent();
			}

			// Handle login
			loginForm.addEventListener('submit', (e) => {
				e.preventDefault();
				if (secretKeyInput.value === API_SECRET_KEY) {
					localStorage.setItem('api_secret_key', secretKeyInput.value);
					showAdminContent();
				} else {
					alert('Incorrect secret key');
				}
			});

			const addLinkForm = document.getElementById('add-link-form');
			const linksTableBody = document.getElementById('links-table-body');

			// Add a new link
			addLinkForm.addEventListener('submit', async (e) => {
				e.preventDefault();
				const formData = new FormData(addLinkForm);
				const data = Object.fromEntries(formData.entries());

				const response = await fetch('/api/links.json', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'Authorization': `Bearer ${localStorage.getItem('api_secret_key')}`
					},
					body: JSON.stringify(data)
				});

				if (response.ok) {
					location.reload();
				} else {
					const { message } = await response.json();
					alert(`Error: ${message}`);
				}
			});

			// Delete a link
			linksTableBody.addEventListener('click', async (e) => {
				if (e.target.classList.contains('delete-btn')) {
					const id = e.target.dataset.id;
					if (confirm('Are you sure you want to delete this link?')) {
						const response = await fetch('/api/links.json', {
							method: 'DELETE',
							headers: {
								'Content-Type': 'application/json',
								'Authorization': `Bearer ${localStorage.getItem('api_secret_key')}`
							},
							body: JSON.stringify({ id: parseInt(id) })
						});

						if (response.ok) {
							location.reload();
						} else {
							const { message } = await response.json();
							alert(`Error: ${message}`);
						}
					}
				}
			});
		});
	</script>
</Layout>
