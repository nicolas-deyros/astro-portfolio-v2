---
import Layout from '@layouts/index.astro'
import { db, FormSubmissions } from 'astro:db'

interface FormSubmissionData {
	id: number
	fullName: string
	email: string
	message: string | null
	resendMessageId?: string
	status?: string
}

// Server-side data fetching - direct database access
import { Resend } from 'resend'
const resend = new Resend(import.meta.env.RESEND_API_KEY)

let submissions: FormSubmissionData[] = []
try {
	// Astro DB select returns all columns by default
	const dbSubmissions = await db.select().from(FormSubmissions)

	submissions = await Promise.all(
		dbSubmissions.map(async (submission: FormSubmissionData) => {
			let status = 'not sent'
			if (submission.resendMessageId) {
				try {
					const response = await resend.emails.get(submission.resendMessageId)
					// Log the response data for inspection
					console.log(
						'Resend API response for messageId',
						submission.resendMessageId,
						response.data,
					)
					// Display only the last_event field if available
					status =
						response.data &&
						typeof response.data === 'object' &&
						'last_event' in response.data
							? ((response.data as { last_event?: string }).last_event ??
								'unknown')
							: 'unknown'
				} catch {
					status = 'unknown'
				}
			}
			return {
				...submission,
				status,
			}
		}),
	)
	console.log(`Loaded ${submissions.length} form submissions from database`)
} catch (error) {
	console.error('Error fetching form submissions from database:', error)
	submissions = []
}
---

<Layout title="Admin | CRM Management">
	{/* Auth Check Script - Runs immediately to prevent content flash */}
	<script is:inline>
		// Hide page initially
		document.documentElement.style.visibility = 'hidden'

		// Check authentication using the new cookie-based system
		async function checkAuth() {
			try {
				const response = await fetch('/api/auth.json', {
					method: 'GET',
					credentials: 'include',
				})
				const data = await response.json()

				if (response.ok && data.success && data.authenticated) {
					// Authenticated - show page
					document.documentElement.style.visibility = 'visible'
				} else {
					// Not authenticated - redirect immediately
					window.location.href = '/admin'
				}
			} catch (error) {
				console.error('Auth check failed:', error)
				window.location.href = '/admin'
			}
		}

		// Run auth check
		checkAuth()
	</script>

	<div class="min-h-screen bg-white dark:bg-gray-900">
		{/* Main Content */}
		<div class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
			{/* Header */}
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-gray-900 dark:text-white">
					CRM Management
				</h1>
				<p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
					View and manage form submissions from your contact form.
				</p>
			</div>

			{/* Submissions Statistics */}
			<div class="mb-8">
				<div
					class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<svg
								class="h-8 w-8 text-blue-600 dark:text-blue-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z">
								</path>
							</svg>
						</div>
						<div class="ml-5">
							<dl>
								<dt
									class="text-sm font-medium text-gray-500 dark:text-gray-400">
									Total Submissions
								</dt>
								<dd class="text-2xl font-bold text-gray-900 dark:text-white">
									{submissions.length}
								</dd>
							</dl>
						</div>
					</div>
				</div>
			</div>

			<!-- Submissions Table -->
			<div
				class="rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800">
				<div class="border-b border-gray-200 px-6 py-4 dark:border-gray-700">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
						Form Submissions
					</h2>
					<p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
						All contact form submissions from your website.
					</p>
				</div>

				{
					submissions.length === 0 ? (
						<div class="px-6 py-12 text-center">
							<svg
								class="mx-auto h-12 w-12 text-gray-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
								/>
							</svg>
							<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">
								No submissions
							</h3>
							<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
								No form submissions have been received yet.
							</p>
						</div>
					) : (
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
								<thead class="bg-gray-50 dark:bg-gray-700">
									<tr>
										<th
											scope="col"
											class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase dark:text-gray-300">
											ID
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase dark:text-gray-300">
											Full Name
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase dark:text-gray-300">
											Email
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase dark:text-gray-300">
											Message
										</th>
										<th
											scope="col"
											class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase dark:text-gray-300">
											Email Status
										</th>
										<th scope="col" class="relative px-6 py-3">
											<span class="sr-only">Actions</span>
										</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-800">
									{submissions.map((submission: FormSubmissionData) => {
										// Mask email for privacy: show first letter, asterisks, and domain
										const maskEmail = (email: string) => {
											const [user, domain] = email.split('@')
											if (!user || !domain) return email
											return `${user[0]}${'*'.repeat(Math.max(user.length - 1, 3))}@${domain}`
										}
										return (
											<tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50">
												<td class="px-6 py-4 text-sm font-medium whitespace-nowrap text-gray-900 dark:text-white">
													{submission.id}
												</td>
												<td class="px-6 py-4 text-sm whitespace-nowrap text-gray-900 dark:text-white">
													{submission.fullName}
												</td>
												<td class="px-6 py-4 text-sm whitespace-nowrap text-gray-900 dark:text-white">
													{maskEmail(submission.email)}
												</td>
												<td class="px-6 py-4 text-sm text-gray-900 dark:text-white">
													<div
														class="max-w-xs truncate"
														title={submission.message || 'No message'}>
														{submission.message || 'No message provided'}
													</div>
												</td>
												<td class="px-6 py-4 text-sm text-gray-900 dark:text-white">
													{submission.status}
												</td>
												<td class="px-6 py-4 text-right text-sm font-medium whitespace-nowrap">
													<button
														class="view-btn text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
														data-id={submission.id}
														data-name={submission.fullName}
														data-email={submission.email}
														data-message={submission.message || ''}>
														View
													</button>
												</td>
											</tr>
										)
									})}
								</tbody>
							</table>

							<div class="sm:hidden">
								{submissions.map((submission: FormSubmissionData) => (
									<div class="border-b border-gray-200 bg-white p-4 dark:border-gray-700 dark:bg-gray-800">
										<div class="flex items-center justify-between">
											<div class="flex-1">
												<h3 class="text-sm font-medium text-gray-900 dark:text-white">
													{submission.fullName}
												</h3>
												<p class="text-sm text-gray-500 dark:text-gray-400">
													ID: {submission.id}
												</p>
											</div>
											<button
												class="view-btn text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
												data-id={submission.id}
												data-name={submission.fullName}
												data-email={submission.email}
												data-message={submission.message || ''}>
												View
											</button>
										</div>
										<div class="mt-2">
											<p class="text-sm text-gray-900 dark:text-white">
												<a
													href={`mailto:${submission.email}`}
													class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
													{submission.email}
												</a>
											</p>
											{submission.message && (
												<p class="mt-1 truncate text-sm text-gray-600 dark:text-gray-400">
													{submission.message}
												</p>
											)}
										</div>
									</div>
								))}
							</div>
						</div>
					)
				}
			</div>
		</div>
	</div>

	<!-- Client-side functionality -->
	<script>
		document.addEventListener('astro:page-load', async () => {
			// Check authentication using the new cookie-based system
			try {
				const response = await fetch('/api/auth.json', {
					method: 'GET',
					credentials: 'include',
				})
				const data = await response.json()

				if (!response.ok || !data.success || !data.authenticated) {
					console.log('Not authenticated, redirecting to admin')
					window.location.href = '/admin'
					return
				}
			} catch (error) {
				console.error('Auth check failed:', error)
				window.location.href = '/admin'
				return
			}

			// Handle view submission details
			document.addEventListener('click', e => {
				const target = e.target as HTMLElement
				if (target.classList.contains('view-btn')) {
					const id = target.getAttribute('data-id')
					const name = target.getAttribute('data-name')
					const email = target.getAttribute('data-email')
					const message = target.getAttribute('data-message')

					openSubmissionModal(id, name, email, message)
				}
			})

			function openSubmissionModal(
				id: string | null,
				name: string | null,
				email: string | null,
				message: string | null,
			): void {
				if (!id || !name || !email) return

				const modalHtml = `
					<div id="submission-modal" class="fixed inset-0 z-50 overflow-y-auto">
						<div class="flex min-h-screen items-center justify-center p-4">
							<div class="fixed inset-0 bg-black bg-opacity-50" onclick="closeSubmissionModal()"></div>
							<div class="relative w-full max-w-2xl rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
								<div class="mb-4 flex items-center justify-between">
									<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
										Submission Details
									</h3>
									<button
										onclick="closeSubmissionModal()"
										class="rounded-md p-2 text-gray-500 hover:text-gray-700 focus:ring-2 focus:ring-blue-500 focus:outline-none dark:text-gray-400 dark:hover:text-gray-200">
										<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
										</svg>
									</button>
								</div>
								<div class="space-y-4">
									<div>
										<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">ID</label>
										<p class="mt-1 text-sm text-gray-900 dark:text-white">${id}</p>
									</div>
									<div>
										<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
										<p class="mt-1 text-sm text-gray-900 dark:text-white">${name}</p>
									</div>
									<div>
										<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Message</label>
										<div class="mt-1 rounded-md border border-gray-300 bg-gray-50 p-3 dark:border-gray-600 dark:bg-gray-700">
											<p class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap">${message || 'No message provided'}</p>
										</div>
									</div>
								</div>
								<div class="mt-6 flex justify-end space-x-3">
									<button
										onclick="closeSubmissionModal()"
										class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 dark:focus:ring-offset-gray-800">
										Close
									</button>
								</div>
							</div>
						</div>
					</div>
				`

				document.body.insertAdjacentHTML('beforeend', modalHtml)
			}

			// Make closeSubmissionModal globally available
			function closeSubmissionModal(): void {
				const modal = document.getElementById('submission-modal')
				modal?.remove()
			}

			// Attach to window object for onclick handlers
			// eslint-disable-next-line @typescript-eslint/no-explicit-any
			;(window as any).closeSubmissionModal = closeSubmissionModal
		})
	</script>
</Layout>
