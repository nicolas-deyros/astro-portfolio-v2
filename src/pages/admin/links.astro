---
import Layout from '@layouts/index.astro'
import { count, db, like, Links as LinksTable, or, sql } from 'astro:db'

const { url } = Astro.request
const searchParams = new URL(url).searchParams

// Pagination parameters
const page = parseInt(searchParams.get('page') || '1')
const pageSize = parseInt(searchParams.get('pageSize') || '10')

// Sorting parameters
const sort = (searchParams.get('sort') || 'date') as
	| 'title'
	| 'url'
	| 'tags'
	| 'date'
const dir = (searchParams.get('dir') || 'desc') as 'asc' | 'desc'

// Filter parameters
const search = searchParams.get('search') || ''
const tag = searchParams.get('tag') || ''

interface LinkData {
	id: number
	title: string
	url: string
	tags: string
	date: string
}

interface PaginationData {
	page: number
	pageSize: number
	total: number
	totalPages: number
	hasNext: boolean
	hasPrev: boolean
}

// Server-side data fetching with advanced filtering and pagination
let links: LinkData[] = []
let pagination: PaginationData = {
	page: 1,
	pageSize: 10,
	total: 0,
	totalPages: 0,
	hasNext: false,
	hasPrev: false,
}
let availableTags: string[] = []

try {
	const offset = (page - 1) * pageSize

	// Build base queries
	let query = db.select().from(LinksTable)
	let countQuery = db.select({ count: count() }).from(LinksTable)

	// Add search conditions
	if (search) {
		const searchCondition = or(
			like(LinksTable.title, `%${search}%`),
			like(LinksTable.url, `%${search}%`),
			like(LinksTable.tags, `%${search}%`),
		)
		query = query.where(searchCondition) as typeof query
		countQuery = countQuery.where(searchCondition) as typeof countQuery
	}

	// Add tag filter
	if (tag) {
		const tagCondition = like(LinksTable.tags, `%${tag}%`)
		query = query.where(tagCondition) as typeof query
		countQuery = countQuery.where(tagCondition) as typeof countQuery
	}

	// Add sorting
	const orderColumn = LinksTable[sort]
	if (dir === 'asc') {
		query = query.orderBy(orderColumn) as typeof query
	} else {
		query = query.orderBy(sql`${orderColumn} DESC`) as typeof query
	}

	// Add pagination
	query = query.limit(pageSize).offset(offset) as typeof query

	// Execute queries
	const [dbLinks, totalResult, allLinks] = await Promise.all([
		query,
		countQuery,
		db.select({ tags: LinksTable.tags }).from(LinksTable), // For extracting all tags
	])

	// Process results
	links = dbLinks.map(link => ({
		id: link.id,
		title: link.title,
		url: link.url,
		tags: link.tags,
		date: link.date,
	}))

	const total = totalResult[0]?.count || 0
	const totalPages = Math.ceil(total / pageSize)

	pagination = {
		page,
		pageSize,
		total,
		totalPages,
		hasNext: page < totalPages,
		hasPrev: page > 1,
	}

	// Extract unique tags for filter dropdown
	const allTags = new Set<string>()
	allLinks.forEach(link => {
		if (link.tags) {
			link.tags.split(',').forEach(tagItem => {
				const cleanTag = tagItem.trim()
				if (cleanTag) allTags.add(cleanTag)
			})
		}
	})
	availableTags = Array.from(allTags).sort()

	console.log(
		`Loaded ${links.length} of ${total} links (page ${page}/${totalPages}), sorted by ${sort} ${dir}, search: "${search}", tag: "${tag}"`,
	)
} catch (error) {
	console.error('Error fetching links from database:', error)
	links = []
}
---

<Layout title="Admin | Link Management">
	{/* Auth Check Script - Runs immediately to prevent content flash */}
	<script is:inline>
		// Hide page initially
		document.documentElement.style.visibility = 'hidden'

		// Check authentication using the new cookie-based system
		async function checkAuth() {
			try {
				const response = await fetch('/api/auth.json', {
					method: 'GET',
					credentials: 'include',
				})
				const data = await response.json()

				if (response.ok && data.success && data.authenticated) {
					// Authenticated - show page
					document.documentElement.style.visibility = 'visible'
				} else {
					// Not authenticated - redirect immediately
					window.location.href = '/admin'
				}
			} catch (error) {
				console.error('Auth check failed:', error)
				window.location.href = '/admin'
			}
		}

		// Run auth check
		checkAuth()
	</script>

	<div class="min-h-screen bg-white dark:bg-gray-900">
		{/* Modal Overlay */}
		<div
			id="modal-overlay"
			class="fixed inset-0 z-40 hidden bg-black/40 transition-opacity dark:bg-black/60">
		</div>

		{/* Error Modal */}
		<dialog
			id="error-modal"
			class="fixed top-1/2 left-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 rounded-xl border border-slate-200 bg-white p-8 shadow-2xl dark:border-slate-700 dark:bg-slate-900">
			<form method="dialog" class="flex flex-col items-center">
				<div class="mb-4 flex items-center gap-3">
					<svg
						class="h-6 w-6 text-red-500 dark:text-red-400"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M12 9v2m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z">
						</path>
					</svg>
					<span
						class="text-lg font-semibold text-slate-900 dark:text-slate-100">
						Error
					</span>
				</div>
				<p
					id="error-modal-message"
					class="mb-6 text-center text-base text-red-700 dark:text-red-300">
				</p>
				<button
					class="rounded-md bg-blue-600 px-6 py-2 text-base font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-blue-500 dark:hover:bg-blue-400 dark:focus:ring-offset-slate-900"
					value="close">
					OK
				</button>
			</form>
		</dialog>

		{/* Confirm Delete Modal */}
		<dialog
			id="confirm-delete-modal"
			class="fixed top-1/2 left-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 rounded-xl border border-slate-200 bg-white p-8 shadow-2xl dark:border-slate-700 dark:bg-slate-900">
			<form method="dialog" class="flex flex-col items-center">
				<div class="mb-4 flex items-center gap-3">
					<svg
						class="h-6 w-6 text-yellow-500 dark:text-yellow-300"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M12 9v2m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z">
						</path>
					</svg>
					<span
						class="text-lg font-semibold text-slate-900 dark:text-slate-100">
						Confirm Delete
					</span>
				</div>
				<p
					class="mb-6 text-center text-base text-slate-700 dark:text-slate-300">
					Are you sure you want to delete this link?
				</p>
				<div class="flex gap-4">
					<button
						id="cancel-delete-btn"
						class="rounded-md bg-gray-200 px-6 py-2 text-base font-medium text-gray-700 shadow-sm transition-colors hover:bg-gray-300 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 dark:focus:ring-offset-slate-900"
						type="button">
						Cancel
					</button>
					<button
						id="confirm-delete-btn"
						class="rounded-md bg-red-600 px-6 py-2 text-base font-medium text-white shadow-sm transition-colors hover:bg-red-700 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:outline-none dark:bg-red-500 dark:hover:bg-red-400 dark:focus:ring-offset-slate-900"
						type="button">
						Delete
					</button>
				</div>
			</form>
		</dialog>

		{/* Confirm Update Modal */}
		<dialog
			id="confirm-update-modal"
			class="fixed top-1/2 left-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 rounded-xl border border-slate-200 bg-white p-8 shadow-2xl dark:border-slate-700 dark:bg-slate-900">
			<form method="dialog" class="flex flex-col items-center">
				<div class="mb-4 flex items-center gap-3">
					<svg
						class="h-6 w-6 text-blue-500 dark:text-blue-400"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
						</path>
					</svg>
					<span
						class="text-lg font-semibold text-slate-900 dark:text-slate-100">
						Confirm Update
					</span>
				</div>
				<p
					class="mb-6 text-center text-base text-slate-700 dark:text-slate-300">
					Are you sure you want to update this link?
				</p>
				<div class="flex gap-4">
					<button
						id="cancel-update-btn"
						class="rounded-md bg-gray-200 px-6 py-2 text-base font-medium text-gray-700 shadow-sm transition-colors hover:bg-gray-300 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 dark:focus:ring-offset-slate-900"
						type="button">
						Cancel
					</button>
					<button
						id="confirm-update-btn"
						class="rounded-md bg-blue-600 px-6 py-2 text-base font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-blue-500 dark:hover:bg-blue-400 dark:focus:ring-offset-slate-900"
						type="button">
						Update
					</button>
				</div>
			</form>
		</dialog>
		{/* Main Content */}
		<div class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
			{/* Header */}
			<div class="mb-8">
				<h2 class="text-3xl font-bold text-gray-900 dark:text-white">
					Link Management
				</h2>
				<p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
					Manage your social links and external resources.
				</p>
			</div>

			{/* Add New Link Form */}
			<div
				class="mb-12 rounded-lg border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-800">
				<div class="mb-6 flex items-center justify-between">
					<h3
						id="form-title"
						class="text-xl font-semibold text-slate-900 dark:text-slate-100">
						Add New Link
					</h3>
					<button
						id="clear-form-btn"
						class="hidden rounded bg-gray-100 px-3 py-2 text-sm text-gray-600 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600">
						Cancel Edit
					</button>
				</div>
				<form id="add-link-form" method="POST" class="space-y-6">
					{/* Error Display */}
					<div
						id="form-errors"
						class="hidden rounded-md bg-red-50 p-4 dark:bg-red-900/20">
						<div class="flex">
							<svg
								class="h-5 w-5 text-red-400"
								fill="currentColor"
								viewBox="0 0 20 20">
								<path
									fill-rule="evenodd"
									d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
									clip-rule="evenodd">
								</path>
							</svg>
							<div class="ml-3">
								<h3 class="text-sm font-medium text-red-800 dark:text-red-200">
									Please fix the following errors:
								</h3>
								<div
									id="form-error-list"
									class="mt-2 text-sm text-red-700 dark:text-red-300">
									{/* Errors will be populated here */}
								</div>
							</div>
						</div>
					</div>

					{/* Success Display */}
					<div
						id="form-success"
						class="hidden rounded-md bg-green-50 p-4 dark:bg-green-900/20">
						<div class="flex">
							<svg
								class="h-5 w-5 text-green-400"
								fill="currentColor"
								viewBox="0 0 20 20">
								<path
									fill-rule="evenodd"
									d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
									clip-rule="evenodd">
								</path>
							</svg>
							<div class="ml-3">
								<p
									id="form-success-message"
									class="text-sm font-medium text-green-800 dark:text-green-200">
									{/* Success message will be populated here */}
								</p>
							</div>
						</div>
					</div>
					<div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
						<div class="sm:col-span-2">
							<label
								for="title"
								class="block text-sm font-medium text-slate-700 dark:text-slate-300">
								Title
							</label>
							<input
								type="text"
								id="title"
								name="title"
								required
								class="mt-1 block w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm placeholder-slate-400 shadow-sm transition-colors focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-blue-400 dark:focus:ring-blue-400"
								placeholder="Enter link title"
							/>
						</div>
						<div class="sm:col-span-2">
							<label
								for="url"
								class="block text-sm font-medium text-slate-700 dark:text-slate-300">
								URL
							</label>
							<input
								type="url"
								id="url"
								name="url"
								required
								class="mt-1 block w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm placeholder-slate-400 shadow-sm transition-colors focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-blue-400 dark:focus:ring-blue-400"
								placeholder="https://example.com"
							/>
						</div>
						<div>
							<label
								for="tags"
								class="block text-sm font-medium text-slate-700 dark:text-slate-300">
								Tags
							</label>
							<input
								type="text"
								id="tags"
								name="tags"
								required
								class="mt-1 block w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm placeholder-slate-400 shadow-sm transition-colors focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-blue-400 dark:focus:ring-blue-400"
								placeholder="tech, ai, development"
							/>
							<p class="mt-1 text-xs text-slate-500 dark:text-slate-400">
								Separate multiple tags with commas
							</p>
						</div>
						<div>
							<label
								for="date"
								class="block text-sm font-medium text-slate-700 dark:text-slate-300">
								Publication Date
							</label>
							<input
								type="date"
								id="date"
								name="date"
								required
								class="mt-1 block w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm placeholder-slate-400 shadow-sm transition-colors focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-blue-400 dark:focus:ring-blue-400"
							/>
							<p class="mt-1 text-xs text-slate-500 dark:text-slate-400">
								Future dates will be marked as "Scheduled"
							</p>
						</div>
					</div>
					<div class="flex justify-end">
						<button
							type="submit"
							id="submit-btn"
							class="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:focus:ring-offset-slate-800">
							<svg
								id="submit-icon"
								class="mr-2 h-4 w-4"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M12 6v6m0 0v6m0-6h6m-6 0H6">
								</path>
							</svg>
							<span id="submit-text">Add Link</span>
						</button>
					</div>
				</form>
			</div>

			{/* Search and Filter Section */}
			<div
				class="mb-8 rounded-lg border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-800">
				<form method="GET" class="space-y-4">
					{/* Preserve existing params */}
					<input type="hidden" name="sort" value={sort} />
					<input type="hidden" name="dir" value={dir} />

					<div class="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-4">
						{/* Search Input */}
						<div class="md:col-span-2">
							<label
								for="search"
								class="mb-2 block text-sm font-medium text-slate-700 dark:text-slate-300">
								Search Links
							</label>
							<input
								type="text"
								id="search"
								name="search"
								value={search}
								placeholder="Search by title, URL, or tags..."
								class="w-full rounded-md border border-slate-300 px-3 py-2 text-sm text-slate-900 placeholder-slate-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-white dark:placeholder-slate-400"
							/>
						</div>

						{/* Tag Filter */}
						<div>
							<label
								for="tag-filter"
								class="mb-2 block text-sm font-medium text-slate-700 dark:text-slate-300">
								Filter by Tag
							</label>
							<select
								id="tag-filter"
								name="tag"
								class="w-full rounded-md border border-slate-300 px-3 py-2 text-sm text-slate-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-white">
								<option value="">All Tags</option>
								{
									availableTags.map(tagOption => (
										<option value={tagOption} selected={tag === tagOption}>
											{tagOption}
										</option>
									))
								}
							</select>
						</div>

						{/* Page Size */}
						<div>
							<label
								for="page-size"
								class="mb-2 block text-sm font-medium text-slate-700 dark:text-slate-300">
								Results per page
							</label>
							<select
								id="page-size"
								name="pageSize"
								class="w-full rounded-md border border-slate-300 px-3 py-2 text-sm text-slate-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-white">
								<option value="10" selected={pageSize === 10}>10</option>
								<option value="20" selected={pageSize === 20}>20</option>
								<option value="50" selected={pageSize === 50}>50</option>
								<option value="100" selected={pageSize === 100}>100</option>
							</select>
						</div>
					</div>

					<div class="flex flex-wrap gap-3">
						<button
							type="submit"
							class="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:bg-blue-500 dark:hover:bg-blue-400 dark:focus:ring-offset-slate-800">
							<svg
								class="mr-2 h-4 w-4"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z">
								</path>
							</svg>
							Search & Filter
						</button>

						{
							(search || tag) && (
								<a
									href="?sort={sort}&dir={dir}&pageSize={pageSize}"
									class="inline-flex items-center rounded-md bg-slate-100 px-4 py-2 text-sm font-medium text-slate-700 shadow-sm transition-colors hover:bg-slate-200 focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:outline-none dark:bg-slate-700 dark:text-slate-300 dark:hover:bg-slate-600 dark:focus:ring-offset-slate-800">
									<svg
										class="mr-2 h-4 w-4"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 24 24">
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M6 18L18 6M6 6l12 12"
										/>
									</svg>
									Clear Filters
								</a>
							)
						}
					</div>

					{/* Results Summary */}
					<div
						class="flex items-center justify-between border-t border-slate-200 pt-4 dark:border-slate-700">
						<p class="text-sm text-slate-600 dark:text-slate-400">
							Showing {(page - 1) * pageSize + 1}-{
								Math.min(page * pageSize, pagination.total)
							} of {pagination.total} results
							{search && ` for "${search}"`}
							{tag && ` with tag "${tag}"`}
						</p>

						{/* Pagination Quick Links */}
						{
							pagination.totalPages > 1 && (
								<div class="flex items-center space-x-2">
									{pagination.hasPrev && (
										<a
											href={`?page=${page - 1}&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
											class="rounded bg-blue-50 px-2 py-1 text-xs text-blue-600 hover:bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400 dark:hover:bg-blue-900/40">
											Previous
										</a>
									)}
									<span class="text-xs text-slate-500 dark:text-slate-400">
										Page {page} of {pagination.totalPages}
									</span>
									{pagination.hasNext && (
										<a
											href={`?page=${page + 1}&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
											class="rounded bg-blue-50 px-2 py-1 text-xs text-blue-600 hover:bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400 dark:hover:bg-blue-900/40">
											Next
										</a>
									)}
								</div>
							)
						}
					</div>
				</form>
			</div>

			{/* Links Table */}
			<div
				class="rounded-lg border border-slate-200 bg-white shadow-sm dark:border-slate-700 dark:bg-slate-800">
				<div class="border-b border-slate-200 px-6 py-4 dark:border-slate-700">
					<div
						class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
						<div>
							<h3
								class="text-xl font-semibold text-slate-900 dark:text-slate-100">
								Links Management
							</h3>
							<p class="mt-1 text-sm text-slate-600 dark:text-slate-400">
								Click column headers to sort. Future dates are marked as
								"Scheduled".
							</p>
						</div>
					</div>
				</div>

				{/* Responsive Table */}
				<div class="overflow-x-auto">
					<table
						class="min-w-full divide-y divide-slate-200 dark:divide-slate-700">
						<thead class="bg-slate-50 dark:bg-slate-700">
							<tr>
								<th
									class="w-8 px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase dark:text-slate-300">
									<span class="sr-only">Select</span>
								</th>
								<th
									class="px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase dark:text-slate-300">
									<a
										href={`?sort=title&dir=${sort === 'title' && dir === 'asc' ? 'desc' : 'asc'}&page=1&pageSize=${pageSize}&search=${search}&tag=${tag}`}
										class="flex items-center gap-1 hover:text-slate-700 dark:hover:text-slate-200">
										Title
										{
											sort === 'title' && (
												<span class="text-blue-600 dark:text-blue-400">
													{dir === 'asc' ? '↑' : '↓'}
												</span>
											)
										}
									</a>
								</th>
								<th
									class="hidden px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase md:table-cell dark:text-slate-300">
									URL
								</th>
								<th
									class="hidden px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase md:table-cell dark:text-slate-300">
									<a
										href={`?sort=tags&dir=${sort === 'tags' && dir === 'asc' ? 'desc' : 'asc'}&page=1&pageSize=${pageSize}&search=${search}&tag=${tag}`}
										class="flex items-center gap-1 hover:text-slate-700 dark:hover:text-slate-200">
										Tags
										{
											sort === 'tags' && (
												<span class="text-blue-600 dark:text-blue-400">
													{dir === 'asc' ? '↑' : '↓'}
												</span>
											)
										}
									</a>
								</th>
								<th
									class="px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase dark:text-slate-300">
									<a
										href={`?sort=date&dir=${sort === 'date' && dir === 'asc' ? 'desc' : 'asc'}&page=1&pageSize=${pageSize}&search=${search}&tag=${tag}`}
										class="flex items-center gap-1 hover:text-slate-700 dark:hover:text-slate-200">
										Date
										{
											sort === 'date' && (
												<span class="text-blue-600 dark:text-blue-400">
													{dir === 'asc' ? '↑' : '↓'}
												</span>
											)
										}
									</a>
								</th>
								<th
									class="hidden px-4 py-3 text-left text-xs font-medium tracking-wider text-slate-500 uppercase md:table-cell dark:text-slate-300">
									Status
								</th>
								<th
									class="px-4 py-3 text-right text-xs font-medium tracking-wider text-slate-500 uppercase dark:text-slate-300">
									Actions
								</th>
							</tr>
						</thead>
						<tbody
							id="links-table-body"
							class="divide-y divide-slate-200 bg-white dark:divide-slate-700 dark:bg-slate-800">
							{
								links.map((link: LinkData) => {
									const linkDate = new Date(link.date)
									const today = new Date()
									const isScheduled = linkDate > today

									return (
										<tr class="hover:bg-slate-50 dark:hover:bg-slate-700/50">
											<td class="px-4 py-4" />
											<td class="px-4 py-4">
												<div class="font-medium break-words text-slate-900 dark:text-slate-100">
													{link.title}
												</div>
												<div class="mt-1 text-sm text-slate-500 md:hidden dark:text-slate-400">
													<div class="mb-1">
														<a
															href={link.url}
															target="_blank"
															rel="noopener noreferrer"
															class="break-all text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
															{link.url}
														</a>
													</div>
													<div>{link.tags}</div>
												</div>
											</td>
											<td class="hidden px-4 py-4 text-sm text-slate-500 md:table-cell dark:text-slate-400">
												<a
													href={link.url}
													target="_blank"
													rel="noopener noreferrer"
													class="break-all text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
													{link.url}
												</a>
											</td>
											<td class="hidden px-4 py-4 text-sm break-words text-slate-500 md:table-cell dark:text-slate-400">
												{link.tags}
											</td>
											<td class="px-4 py-4 text-sm whitespace-nowrap text-slate-500 dark:text-slate-400">
												{link.date}
											</td>
											<td class="hidden px-4 py-4 md:table-cell">
												{isScheduled ? (
													<span class="inline-flex rounded-full bg-yellow-100 px-2 py-1 text-xs font-medium text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
														Scheduled
													</span>
												) : (
													<span class="inline-flex rounded-full bg-green-100 px-2 py-1 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-200">
														Live
													</span>
												)}
											</td>
											<td class="px-4 py-4 text-right">
												<div class="flex justify-end gap-2">
													<button
														class="edit-btn rounded bg-blue-50 px-3 py-1 text-sm text-blue-600 hover:bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400 dark:hover:bg-blue-900/40"
														data-id={link.id}>
														Edit
													</button>
													<button
														class="delete-btn rounded bg-red-50 px-3 py-1 text-sm text-red-600 hover:bg-red-100 dark:bg-red-900/20 dark:text-red-400 dark:hover:bg-red-900/40"
														data-id={link.id}>
														Delete
													</button>
												</div>
											</td>
										</tr>
									)
								})
							}
						</tbody>
					</table>
				</div>
			</div>

			{/* Pagination */}
			{
				pagination.totalPages > 1 && (
					<div class="mt-8 flex items-center justify-between rounded-lg border border-slate-200 bg-white px-6 py-4 shadow-sm dark:border-slate-700 dark:bg-slate-800">
						<div class="flex items-center">
							<p class="text-sm text-slate-600 dark:text-slate-400">
								Showing {(page - 1) * pageSize + 1}-
								{Math.min(page * pageSize, pagination.total)} of{' '}
								{pagination.total} results
							</p>
						</div>

						<div class="flex items-center space-x-2">
							{/* First Page */}
							{page > 2 && (
								<a
									href={`?page=1&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
									class="rounded-md bg-white px-3 py-2 text-sm font-medium text-slate-700 shadow-sm ring-1 ring-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:text-slate-300 dark:ring-slate-600 dark:hover:bg-slate-700">
									1
								</a>
							)}

							{page > 3 && <span class="text-slate-400">…</span>}

							{/* Previous Page */}
							{pagination.hasPrev && (
								<a
									href={`?page=${page - 1}&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
									class="rounded-md bg-white px-3 py-2 text-sm font-medium text-slate-700 shadow-sm ring-1 ring-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:text-slate-300 dark:ring-slate-600 dark:hover:bg-slate-700">
									{page - 1}
								</a>
							)}

							{/* Current Page */}
							<span class="rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white shadow-sm dark:bg-blue-500">
								{page}
							</span>

							{/* Next Page */}
							{pagination.hasNext && (
								<a
									href={`?page=${page + 1}&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
									class="rounded-md bg-white px-3 py-2 text-sm font-medium text-slate-700 shadow-sm ring-1 ring-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:text-slate-300 dark:ring-slate-600 dark:hover:bg-slate-700">
									{page + 1}
								</a>
							)}

							{page < pagination.totalPages - 2 && (
								<span class="text-slate-400">…</span>
							)}

							{/* Last Page */}
							{page < pagination.totalPages - 1 && (
								<a
									href={`?page=${pagination.totalPages}&sort=${sort}&dir=${dir}&pageSize=${pageSize}&search=${search}&tag=${tag}`}
									class="rounded-md bg-white px-3 py-2 text-sm font-medium text-slate-700 shadow-sm ring-1 ring-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:text-slate-300 dark:ring-slate-600 dark:hover:bg-slate-700">
									{pagination.totalPages}
								</a>
							)}
						</div>
					</div>
				)
			}

			{/* No Results Message */}
			{
				links.length === 0 && (
					<div class="rounded-lg border border-slate-200 bg-white p-8 text-center shadow-sm dark:border-slate-700 dark:bg-slate-800">
						<svg
							class="mx-auto h-12 w-12 text-slate-400"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
							/>
						</svg>
						<h3 class="mt-4 text-lg font-medium text-slate-900 dark:text-slate-100">
							No links found
						</h3>
						<p class="mt-2 text-sm text-slate-500 dark:text-slate-400">
							{search || tag
								? 'Try adjusting your search or filters.'
								: 'Get started by adding your first link.'}
						</p>
						{(search || tag) && (
							<a
								href={`?sort=${sort}&dir=${dir}&pageSize=${pageSize}`}
								class="mt-4 inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-400">
								Clear Filters
							</a>
						)}
					</div>
				)
			}

			{/* Action Bar */}
			<div
				id="action-bar"
				class="fixed bottom-4 left-1/2 z-50 hidden -translate-x-1/2 transform rounded-lg border border-slate-200 bg-white px-4 py-3 shadow-lg dark:border-slate-700 dark:bg-slate-800">
				<div class="flex items-center gap-4">
					<span
						id="selected-count"
						class="text-sm text-slate-600 dark:text-slate-400">
						0 selected
					</span>
					<div class="flex gap-2">
						<button
							id="bulk-edit-btn"
							class="rounded bg-blue-600 px-3 py-1 text-sm text-white hover:bg-blue-700">
							Edit
						</button>
						<button
							id="bulk-delete-btn"
							class="rounded bg-red-600 px-3 py-1 text-sm text-white hover:bg-red-700">
							Delete
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		// Auth check and redirect
		document.addEventListener('astro:page-load', async () => {
			// Check authentication using the new cookie-based system
			try {
				const response = await fetch('/api/auth.json', {
					method: 'GET',
					credentials: 'include',
				})
				const data = await response.json()

				if (!response.ok || !data.success || !data.authenticated) {
					console.log('Not authenticated, redirecting to admin')
					window.location.href = '/admin'
					return
				}
			} catch (error) {
				console.error('Auth check failed:', error)
				window.location.href = '/admin'
				return
			}

			function showDeleteModal(id: string): void {
				const modal = document.getElementById(
					'confirm-delete-modal',
				) as HTMLDialogElement
				modal?.showModal()

				// Set up confirmation handler
				const confirmBtn = document.getElementById('confirm-delete-btn')
				const newConfirmBtn = confirmBtn?.cloneNode(true) as HTMLElement
				confirmBtn?.parentNode?.replaceChild(newConfirmBtn, confirmBtn)

				newConfirmBtn?.addEventListener('click', async () => {
					try {
						const response = await fetch(`/api/links.json?id=${id}`, {
							method: 'DELETE',
							headers: {
								'Content-Type': 'application/json',
							},
							credentials: 'include',
						})
						if (response.ok) {
							location.reload()
						} else if (response.status === 401) {
							modal.close()
							showErrorModal('Session expired. Please log in again.')
							window.location.href = '/admin'
						} else {
							modal.close()
							showErrorModal('Error deleting link')
						}
					} catch {
						modal.close()
						showErrorModal('Error deleting link')
					}
				})
			}

			function showUpdateModal(): void {
				const modal = document.getElementById(
					'confirm-update-modal',
				) as HTMLDialogElement
				modal?.showModal()

				// Set up confirmation handler
				const confirmBtn = document.getElementById('confirm-update-btn')
				const newConfirmBtn = confirmBtn?.cloneNode(true) as HTMLElement
				confirmBtn?.parentNode?.replaceChild(newConfirmBtn, confirmBtn)

				newConfirmBtn?.addEventListener('click', async () => {
					if (pendingFormData && editingLinkId) {
						try {
							const data = Object.fromEntries(pendingFormData.entries())
							const response = await fetch('/api/links.json', {
								method: 'PUT',
								headers: {
									'Content-Type': 'application/json',
								},
								credentials: 'include',
								body: JSON.stringify({ id: editingLinkId, ...data }),
							})

							if (response.ok) {
								location.reload()
							} else if (response.status === 401) {
								modal.close()
								showErrorModal('Session expired. Please log in again.')
								window.location.href = '/admin'
							} else {
								modal.close()
								showErrorModal('Error updating link')
							}
						} catch {
							modal.close()
							showErrorModal('Error updating link')
						}
					}
				})
			}

			// Global state for edit mode
			let editMode = false
			let editingLinkId: number | null = null
			let pendingFormData: FormData | null = null

			// Modal utility functions
			function showErrorModal(message: string): void {
				const modal = document.getElementById(
					'error-modal',
				) as HTMLDialogElement
				const messageEl = document.getElementById('error-modal-message')
				if (messageEl) messageEl.textContent = message
				modal?.showModal()
			}

			// Form state management functions
			function setEditMode(link?: {
				id: number
				title: string
				url: string
				tags: string
				date: string
			}): void {
				editMode = true
				editingLinkId = link?.id || null

				// Update UI elements
				const formTitle = document.getElementById('form-title')
				const submitText = document.getElementById('submit-text')
				const submitIcon = document.getElementById('submit-icon')
				const clearBtn = document.getElementById('clear-form-btn')
				const submitBtn = document.getElementById('submit-btn')

				if (formTitle) formTitle.textContent = 'Edit Link'
				if (submitText) submitText.textContent = 'Update Link'
				if (submitBtn) {
					submitBtn.className = submitBtn.className
						.replace('bg-blue-600', 'bg-green-600')
						.replace('hover:bg-blue-700', 'hover:bg-green-700')
				}

				// Change icon to edit icon
				if (submitIcon) {
					submitIcon.innerHTML = `
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
							d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
						</path>`
				}

				if (clearBtn) clearBtn.classList.remove('hidden')

				// Populate form if editing
				if (link) {
					const titleInput = document.getElementById(
						'title',
					) as HTMLInputElement
					const urlInput = document.getElementById('url') as HTMLInputElement
					const tagsInput = document.getElementById('tags') as HTMLInputElement
					const dateInput = document.getElementById('date') as HTMLInputElement

					if (titleInput) titleInput.value = link.title
					if (urlInput) urlInput.value = link.url
					if (tagsInput) tagsInput.value = link.tags
					if (dateInput) dateInput.value = link.date

					// Scroll to form
					document
						.getElementById('add-link-form')
						?.scrollIntoView({ behavior: 'smooth' })
				}
			}

			function clearEditMode(): void {
				editMode = false
				editingLinkId = null
				pendingFormData = null

				// Reset UI elements
				const formTitle = document.getElementById('form-title')
				const submitText = document.getElementById('submit-text')
				const submitIcon = document.getElementById('submit-icon')
				const clearBtn = document.getElementById('clear-form-btn')
				const submitBtn = document.getElementById('submit-btn')
				const form = document.getElementById('add-link-form') as HTMLFormElement

				if (formTitle) formTitle.textContent = 'Add New Link'
				if (submitText) submitText.textContent = 'Add Link'
				if (submitBtn) {
					submitBtn.className = submitBtn.className
						.replace('bg-green-600', 'bg-blue-600')
						.replace('hover:bg-green-700', 'hover:bg-blue-700')
				}

				// Change icon back to plus
				if (submitIcon) {
					submitIcon.innerHTML = `
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
							d="M12 6v6m0 0v6m0-6h6m-6 0H6">
						</path>`
				}

				if (clearBtn) clearBtn.classList.add('hidden')
				if (form) form.reset()
			}

			// Modal close handlers
			document
				.getElementById('cancel-delete-btn')
				?.addEventListener('click', () => {
					const modal = document.getElementById(
						'confirm-delete-modal',
					) as HTMLDialogElement
					modal?.close()
				})

			document
				.getElementById('cancel-update-btn')
				?.addEventListener('click', () => {
					const modal = document.getElementById(
						'confirm-update-modal',
					) as HTMLDialogElement
					modal?.close()
				})

			// Clear form button
			document
				.getElementById('clear-form-btn')
				?.addEventListener('click', () => {
					clearEditMode()
				})

			// Close modals on backdrop click
			document.querySelectorAll('dialog').forEach(dialog => {
				dialog.addEventListener('click', e => {
					const rect = dialog.getBoundingClientRect()
					if (
						e.clientX < rect.left ||
						e.clientX > rect.right ||
						e.clientY < rect.top ||
						e.clientY > rect.bottom
					) {
						dialog.close()
					}
				})
			})

			// Form validation and error display helpers
			function showFormErrors(errors: string[]): void {
				const errorContainer = document.getElementById('form-errors')
				const errorList = document.getElementById('form-error-list')
				const successContainer = document.getElementById('form-success')

				if (errorContainer && errorList) {
					errorList.innerHTML = errors
						.map(error => `<p>• ${error}</p>`)
						.join('')
					errorContainer.classList.remove('hidden')
				}

				if (successContainer) {
					successContainer.classList.add('hidden')
				}

				// Scroll to errors
				errorContainer?.scrollIntoView({ behavior: 'smooth', block: 'nearest' })
			}

			function showFormSuccess(message: string): void {
				const successContainer = document.getElementById('form-success')
				const successMessage = document.getElementById('form-success-message')
				const errorContainer = document.getElementById('form-errors')

				if (successContainer && successMessage) {
					successMessage.textContent = message
					successContainer.classList.remove('hidden')
				}

				if (errorContainer) {
					errorContainer.classList.add('hidden')
				}

				// Scroll to success message
				successContainer?.scrollIntoView({
					behavior: 'smooth',
					block: 'nearest',
				})
			}

			function clearFormMessages(): void {
				const errorContainer = document.getElementById('form-errors')
				const successContainer = document.getElementById('form-success')

				if (errorContainer) errorContainer.classList.add('hidden')
				if (successContainer) successContainer.classList.add('hidden')
			}

			function validateForm(formData: FormData): string[] {
				const errors: string[] = []

				const title = formData.get('title') as string
				const url = formData.get('url') as string
				const date = formData.get('date') as string

				if (!title || title.trim().length === 0) {
					errors.push('Title is required')
				} else if (title.length > 200) {
					errors.push('Title must be less than 200 characters')
				}

				if (!url || url.trim().length === 0) {
					errors.push('URL is required')
				} else {
					try {
						new URL(url)
					} catch {
						errors.push('URL must be a valid URL')
					}
				}

				if (!date || date.trim().length === 0) {
					errors.push('Date is required')
				} else if (isNaN(Date.parse(date))) {
					errors.push('Date must be a valid date')
				}

				return errors
			}

			// Add/Update link form with server actions
			document
				.getElementById('add-link-form')
				?.addEventListener('submit', async e => {
					e.preventDefault()
					clearFormMessages()

					const form = e.target as HTMLFormElement
					const formData = new FormData(form)
					const submitBtn = form.querySelector(
						'button[type="submit"]',
					) as HTMLButtonElement

					// Client-side validation
					const validationErrors = validateForm(formData)
					if (validationErrors.length > 0) {
						showFormErrors(validationErrors)
						return
					}

					// Disable submit button
					const originalText = submitBtn.textContent
					submitBtn.disabled = true
					submitBtn.textContent = editMode ? 'Updating...' : 'Adding...'

					try {
						if (editMode && editingLinkId) {
							// Store form data and show confirmation modal
							pendingFormData = formData
							showUpdateModal()
						} else {
							// Use server action for creating new link
							const response = await fetch('/api/links.json', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								credentials: 'include',
								body: JSON.stringify(Object.fromEntries(formData)),
							})

							const result = await response.json()

							if (response.ok) {
								showFormSuccess('Link added successfully!')
								form.reset()
								// Reload page after a short delay to show success message
								setTimeout(() => {
									location.reload()
								}, 1500)
							} else if (response.status === 401) {
								showFormErrors(['Session expired. Please log in again.'])
								setTimeout(() => {
									window.location.href = '/admin'
								}, 2000)
							} else {
								// Parse validation errors from server
								const errorMessage = result.message || 'Failed to add link'
								if (result.errors && Array.isArray(result.errors)) {
									showFormErrors(result.errors)
								} else {
									showFormErrors([errorMessage])
								}
							}
						}
					} catch (error) {
						showFormErrors([
							'Network error. Please check your connection and try again.',
						])
						console.error('Form submission error:', error)
					} finally {
						// Re-enable submit button
						submitBtn.disabled = false
						submitBtn.textContent = originalText
					}
				})

			// Link actions
			document
				.getElementById('links-table-body')
				?.addEventListener('click', async e => {
					const target = e.target as HTMLElement
					const id = target.getAttribute('data-id')

					if (target.classList.contains('delete-btn') && id) {
						showDeleteModal(id)
					} else if (target.classList.contains('edit-btn') && id) {
						// Find the link data from the table row
						const row = target.closest('tr')
						if (row) {
							const titleEl = row.querySelector('.font-medium')
							const urlEl = row.querySelector('a[href]')
							const tagsEl = row.querySelector('td:nth-child(4)')
							const dateEl = row.querySelector('td:nth-child(5)')

							const linkData = {
								id: parseInt(id),
								title: titleEl?.textContent?.trim() || '',
								url: urlEl?.getAttribute('href') || '',
								tags: tagsEl?.textContent?.trim() || '',
								date: dateEl?.textContent?.trim() || '',
							}

							setEditMode(linkData)
						}
					}
				})
		})
	</script>
</Layout>
