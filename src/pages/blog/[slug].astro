---
export const prerender = true
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths() {
	const blog = await getCollection('blog')
	return blog.map(post => ({
		params: { slug: post.slug },
		props: { post },
	}))
}

type Props = {
	post: CollectionEntry<'blog'>
}

const { post } = Astro.props
const { data, render } = post
const { Content } = await render()

import Layout from '@layouts/index.astro'
import Section from '@components/Section.astro'
const { title, date, author, description, category } = data

const markdown = post.body
const plainText = markdown
	.replace(/[#_*>\-[\]`>]/g, '')
	.replace(/!\[.*\]\(.*\)/g, '')
const wordCount = plainText.trim().split(/\s+/).length
const wordsPerMinute = 200
const readingTime = Math.max(1, Math.round(wordCount / wordsPerMinute))
---

<Layout title={`Blog | ${title}`} {description} isBlog={true}>
	<div class="relative">
		<div
			id="progress-bar"
			class="fixed top-0 left-0 z-50 h-1 bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300 dark:from-cyan-400 dark:to-blue-400"
			style="width: 0%;">
		</div>
		<div
			id="progress-percent"
			class="fixed top-0 right-4 z-51 rounded-b-md border-r border-b border-l border-gray-200 bg-white px-3 py-1 text-sm font-bold text-cyan-600 shadow-lg dark:border-gray-600 dark:bg-gray-800 dark:text-cyan-400">
			0%
		</div>
	</div>
	<Section>
		<header class="mb-8 border-b border-gray-200 pb-6 dark:border-gray-700">
			<h1
				class="mb-4 text-6xl leading-tight font-bold text-gray-900 md:text-4xl dark:text-white">
				{title}
			</h1>

			<!-- Article Meta -->
			<div
				class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
				{
					category && (
						<a
							href={`/blog/tags/${category}`}
							class="inline-block rounded-full bg-blue-100 px-3 py-1 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
							{category}
						</a>
					)
				}

				<time
					datetime={typeof date === 'string' ? date : date.toISOString()}
					class="flex items-center gap-1">
					<span>üìÖ</span>
					{
						new Date(date).toLocaleDateString('en-us', {
							year: 'numeric',
							month: 'long',
							day: 'numeric',
						})
					}
				</time>

				<span class="flex items-center gap-1">
					<span>üë§</span>
					{author}
				</span>

				<span class="flex items-center gap-1">
					<span>‚è±Ô∏è</span>
					{readingTime} min read
				</span>
			</div>
		</header>
		<div class="mb-6 flex flex-wrap gap-3">
			<button
				id="read-aloud-btn"
				type="button"
				class="flex items-center gap-2 rounded-lg bg-cyan-600 px-4 py-2 text-white shadow-md transition-colors hover:bg-cyan-700 dark:bg-cyan-700 dark:hover:bg-cyan-600">
				<span id="read-aloud-icon">‚ñ∂Ô∏è</span>
				<span id="read-aloud-label">Read Aloud</span>
			</button>

			<button
				id="stop-aloud-btn"
				type="button"
				style="display:none"
				class="flex items-center gap-2 rounded-lg bg-red-600 px-4 py-2 text-white shadow-md transition-colors hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600">
				<span>‚èπÔ∏è</span>
				<span>Stop</span>
			</button>
		</div>

		<div
			id="blog-content"
			class="prose prose-gray dark:prose-invert prose-base md:prose-lg lg:prose-xl container max-w-none">
			<Content />
		</div>
	</Section>
</Layout>
<script>
	window.addEventListener('DOMContentLoaded', () => {
		let voices = []
		let selectedVoice: SpeechSynthesisVoice | null = null
		const readBtn = document.getElementById('read-aloud-btn')
		const stopBtn = document.getElementById('stop-aloud-btn')
		const content = document.getElementById('blog-content')
		const iconSpan = document.getElementById('read-aloud-icon')
		const labelSpan = document.getElementById('read-aloud-label')

		const progressBar = document.getElementById('progress-bar')
		const blogContent = document.getElementById('blog-content')
		const progressPercent = document.getElementById('progress-percent')

		function updateProgressBar() {
			if (!blogContent) return
			const rect = blogContent.getBoundingClientRect()
			const scrollTop = window.scrollY || window.pageYOffset
			const contentTop = rect.top + scrollTop
			const contentHeight = blogContent.offsetHeight
			const windowHeight = window.innerHeight
			const maxScroll = contentTop + contentHeight - windowHeight
			const percent = Math.min(
				100,
				Math.max(
					0,
					((scrollTop - contentTop) / (maxScroll - contentTop)) * 100,
				),
			)
			if (progressBar) {
				progressBar.style.width = percent + '%'
			}
			if (progressPercent) {
				progressPercent.textContent = `${Math.round(percent)}%`
			}
		}

		window.addEventListener('scroll', updateProgressBar)
		window.addEventListener('resize', updateProgressBar)
		updateProgressBar()

		// Load voices
		function loadVoices() {
			voices = window.speechSynthesis.getVoices()

			// Filter for English voices
			const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))

			// Try to find a preferred voice
			selectedVoice =
				englishVoices.find(voice => voice.name.includes('Zira')) ||
				englishVoices.find(voice => voice.name.includes('Samantha')) ||
				englishVoices.find(voice => voice.default) ||
				englishVoices[0]

			console.log('Selected voice:', selectedVoice)
		}

		// Load voices when available
		if (voices.length === 0) {
			window.speechSynthesis.onvoiceschanged = loadVoices
		} else {
			loadVoices()
		}

		if (!readBtn || !stopBtn || !content) return

		let utterance = null
		let isPlaying = false
		let isPaused = false

		function updateUI() {
			if (isPlaying) {
				if (iconSpan) iconSpan.textContent = isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'
				if (labelSpan) labelSpan.textContent = isPaused ? 'Resume' : 'Pause'
				if (stopBtn) stopBtn.style.display = ''
			} else {
				if (iconSpan) iconSpan.textContent = '‚ñ∂Ô∏è'
				if (labelSpan) labelSpan.textContent = 'Read Aloud'
				if (stopBtn) stopBtn.style.display = 'none'
			}
		}

		readBtn.addEventListener('click', () => {
			if (!isPlaying) {
				window.speechSynthesis.cancel()
				const text = content.innerText
				utterance = new window.SpeechSynthesisUtterance(text)

				if (selectedVoice) {
					utterance.voice = selectedVoice
				}
				utterance.lang = 'en-US'
				utterance.rate = 0.9 // Slightly slower for better comprehension
				utterance.pitch = 1
				utterance.volume = 0.8

				utterance.onend = () => {
					isPlaying = false
					isPaused = false
					updateUI()
				}
				utterance.onerror = () => {
					isPlaying = false
					isPaused = false
					updateUI()
				}
				utterance.onpause = () => {
					isPaused = true
					updateUI()
				}
				utterance.onresume = () => {
					isPaused = false
					updateUI()
				}

				window.speechSynthesis.speak(utterance)
				isPlaying = true
				isPaused = false
				updateUI()
			} else if (
				window.speechSynthesis.speaking &&
				!window.speechSynthesis.paused
			) {
				window.speechSynthesis.pause()
				isPaused = true
				updateUI()
			} else if (window.speechSynthesis.paused) {
				window.speechSynthesis.resume()
				isPaused = false
				updateUI()
			}
		})

		stopBtn.addEventListener('click', () => {
			window.speechSynthesis.cancel()
			isPlaying = false
			isPaused = false
			updateUI()
		})
	})
</script>
