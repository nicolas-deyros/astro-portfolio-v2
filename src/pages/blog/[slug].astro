---
export const prerender = true
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths() {
	const blog = await getCollection('blog')
	return blog.map(post => ({
		params: { slug: post.slug },
		props: { post },
	}))
}

type Props = {
	post: CollectionEntry<'blog'>
}

const { post } = Astro.props
const { data, render } = post
const { Content } = await render()

import EnhancedAudioPlayer from '@components/AudioPlayer/EnhancedAudioPlayer.astro'
import Section from '@components/Section.astro'
import BlogTranslator from '@components/Translation/BlogTranslator.astro'
import Layout from '@layouts/index.astro'
const { title, date, author, description, category } = data

const markdown = post.body

// Enhanced text cleaning for reading time calculation
const getReadableText = (text: string): string => {
	return (
		text
			// Remove image markdown ![alt](url)
			.replace(/!\[([^\]]*)\]\([^)]+\)/g, '')
			// Remove video embeds and iframe links
			.replace(
				/\[!\[.*?\]\(.*?\)\]\(.*?(youtube|youtu\.be|vimeo|dailymotion).*?\)/gi,
				'',
			)
			// Remove link markdown [text](url) but keep text
			.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
			// Remove code blocks
			.replace(/```[\s\S]*?```/g, '')
			// Remove inline code backticks
			.replace(/`([^`]+)`/g, '$1')
			// Remove markdown headers
			.replace(/^#{1,6}\s+/gm, '')
			// Remove markdown emphasis
			.replace(/(\*{1,2}|_{1,2})(.*?)\1/g, '$2')
			// Remove blockquotes
			.replace(/^>\s*/gm, '')
			// Remove list markers
			.replace(/^[\s]*[-*+]\s+/gm, '')
			.replace(/^[\s]*\d+\.\s+/gm, '')
			// Clean whitespace
			.replace(/\s+/g, ' ')
			.trim()
	)
}

const plainText = getReadableText(markdown)
const wordCount = plainText.trim().split(/\s+/).length
const wordsPerMinute = 200
const readingTime = Math.max(1, Math.round(wordCount / wordsPerMinute))

// For the audio player, we'll pass the original markdown and let the audio player handle the advanced cleaning
const audioText = markdown
---

<Layout title={`Blog | ${title}`} {description} isBlog={true}>
	<div class="relative">
		<div
			id="progress-bar"
			class="fixed top-0 left-0 z-50 h-1 bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300 dark:from-cyan-400 dark:to-blue-400"
			style="width: 0%;">
		</div>
		<div
			id="progress-percent"
			class="fixed top-0 left-4 z-51 rounded-b-md border-r border-b border-l border-gray-200 bg-white px-3 py-1 text-sm font-bold text-cyan-600 shadow-lg md:right-4 md:left-auto dark:border-gray-600 dark:bg-gray-800 dark:text-cyan-400">
			0%
		</div>
	</div>
	<Section>
		<div class="container mx-auto max-w-4xl px-4">
			<header class="mb-8 border-b border-gray-200 pb-6 dark:border-gray-700">
				<h1
					class="mb-4 text-6xl leading-tight font-bold text-gray-900 md:text-4xl dark:text-white">
					{title}
				</h1>

				<!-- Article Meta -->
				<div
					class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
					{
						category && (
							<a
								href={`/blog/tags/${category}`}
								class="inline-block rounded-full bg-blue-100 px-3 py-1 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
								{category}
							</a>
						)
					}

					<time
						datetime={typeof date === 'string' ? date : date.toISOString()}
						class="flex items-center gap-1">
						<span>üìÖ</span>
						{
							new Date(date).toLocaleDateString('en-us', {
								year: 'numeric',
								month: 'long',
								day: 'numeric',
							})
						}
					</time>

					<span class="flex items-center gap-1">
						<span>üë§</span>
						{author}
					</span>

					<span class="flex items-center gap-1">
						<span>‚è±Ô∏è</span>
						{readingTime} min read
					</span>
				</div>
			</header>

			<!-- Enhanced Audio Player with improved content filtering -->
			<div class="mb-6">
				<EnhancedAudioPlayer
					text={audioText}
					enableVisualization={true}
					client="visible"
					class="w-full"
				/>
			</div>

			<!-- Translation Component -->
			<BlogTranslator className="mb-6" />

			<div
				id="blog-content"
				class="prose prose-gray dark:prose-invert prose-base md:prose-lg lg:prose-xl max-w-none">
				<Content />
			</div>
		</div>
	</Section>
</Layout>

<!-- Enhanced Audio Player with Web Audio API + Web Speech API -->
<script>
	// Progress bar functionality only (audio handled by React component)
	function initializeBlogFeatures(): (() => void) | null {
		console.log('Initializing blog features...')

		// Initialize progress bar
		const progressCleanup = initProgressBar()

		return () => {
			if (typeof progressCleanup === 'function') progressCleanup()
		}
	}

	function initProgressBar(): (() => void) | null {
		const progressBar = document.getElementById('progress-bar')
		const blogContent = document.getElementById('blog-content')
		const progressPercent = document.getElementById('progress-percent')

		if (!progressBar || !blogContent || !progressPercent) {
			console.warn('Progress bar elements not found')
			return null
		}

		function updateProgressBar(): void {
			if (!blogContent) {
				console.warn('blogContent is null, cannot update progress bar')
				return
			}
			const rect = blogContent.getBoundingClientRect()
			const scrollTop = window.scrollY || window.pageYOffset
			const contentTop = rect.top + scrollTop
			const contentHeight = blogContent.offsetHeight
			const windowHeight = window.innerHeight

			const contentStart = contentTop
			const contentEnd = contentTop + contentHeight - windowHeight
			const scrollProgress = Math.max(0, scrollTop - contentStart)
			const maxScroll = Math.max(1, contentEnd - contentStart)
			const percent = Math.min(
				100,
				Math.max(0, (scrollProgress / maxScroll) * 100),
			)

			if (progressBar) {
				progressBar.style.width = percent + '%'
			}
			if (progressPercent) {
				progressPercent.textContent = `${Math.round(percent)}%`
			}
		}

		const handleScroll = (): void => updateProgressBar()
		const handleResize = (): void => updateProgressBar()

		window.addEventListener('scroll', handleScroll)
		window.addEventListener('resize', handleResize)
		updateProgressBar()

		return (): void => {
			window.removeEventListener('scroll', handleScroll)
			window.removeEventListener('resize', handleResize)
		}
	}

	// Enhanced cleanup for Astro view transitions
	let cleanup: (() => void) | null = null

	// Clean up before navigation
	document.addEventListener('astro:before-preparation', () => {
		console.log('Cleaning up before navigation')
		try {
			if (cleanup) {
				cleanup()
				cleanup = null
			}
		} catch (error) {
			console.log('Error during navigation cleanup:', error)
		}
	})

	// Initialize on Astro page load
	document.addEventListener('astro:page-load', () => {
		console.log('Astro page loaded - initializing')
		if (cleanup) cleanup()
		setTimeout(() => {
			cleanup = initializeBlogFeatures()
		}, 100)
	})

	// Fallback for direct page loads (not view transitions)
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			setTimeout(() => {
				if (!cleanup) {
					cleanup = initializeBlogFeatures()
				}
			}, 100)
		})
	} else {
		setTimeout(() => {
			if (!cleanup) {
				cleanup = initializeBlogFeatures()
			}
		}, 50)
	}
</script>
