---
export const prerender = true
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths() {
	const blog = await getCollection('blog')
	return blog.map(post => ({
		params: { slug: post.slug },
		props: { post },
	}))
}

type Props = {
	post: CollectionEntry<'blog'>
}

const { post } = Astro.props
const { data, render } = post
const { Content } = await render()

import Layout from '@layouts/index.astro'
import Section from '@components/Section.astro'
const { title, date, author, description, category } = data

const markdown = post.body
const plainText = markdown
	.replace(/[#_*>\-[\]`>]/g, '')
	.replace(/!\[.*\]\(.*\)/g, '')
const wordCount = plainText.trim().split(/\s+/).length
const wordsPerMinute = 200
const readingTime = Math.max(1, Math.round(wordCount / wordsPerMinute))
---

<Layout title={`Blog | ${title}`} {description} isBlog={true}>
	<div class="relative">
		<div
			id="progress-bar"
			class="fixed top-0 left-0 z-50 h-1 bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300 dark:from-cyan-400 dark:to-blue-400"
			style="width: 0%;">
		</div>
		<div
			id="progress-percent"
			class="fixed top-0 left-4 z-51 rounded-b-md border-r border-b border-l border-gray-200 bg-white px-3 py-1 text-sm font-bold text-cyan-600 shadow-lg md:right-4 md:left-auto dark:border-gray-600 dark:bg-gray-800 dark:text-cyan-400">
			0%
		</div>
	</div>
	<Section>
		<header class="mb-8 border-b border-gray-200 pb-6 dark:border-gray-700">
			<h1
				class="mb-4 text-6xl leading-tight font-bold text-gray-900 md:text-4xl dark:text-white">
				{title}
			</h1>

			<!-- Article Meta -->
			<div
				class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
				{
					category && (
						<a
							href={`/blog/tags/${category}`}
							class="inline-block rounded-full bg-blue-100 px-3 py-1 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
							{category}
						</a>
					)
				}

				<time
					datetime={typeof date === 'string' ? date : date.toISOString()}
					class="flex items-center gap-1">
					<span>üìÖ</span>
					{
						new Date(date).toLocaleDateString('en-us', {
							year: 'numeric',
							month: 'long',
							day: 'numeric',
						})
					}
				</time>

				<span class="flex items-center gap-1">
					<span>üë§</span>
					{author}
				</span>

				<span class="flex items-center gap-1">
					<span>‚è±Ô∏è</span>
					{readingTime} min read
				</span>
			</div>
		</header>
		<div class="mb-6 flex flex-wrap gap-3">
			<button
				id="read-aloud-btn"
				type="button"
				class="flex items-center gap-2 rounded-lg bg-cyan-600 px-4 py-2 text-white shadow-md transition-colors hover:bg-cyan-700 dark:bg-cyan-700 dark:hover:bg-cyan-600">
				<span id="read-aloud-icon">‚ñ∂Ô∏è</span>
				<span id="read-aloud-label">Read Aloud</span>
			</button>

			<button
				id="stop-aloud-btn"
				type="button"
				style="display:none"
				class="flex items-center gap-2 rounded-lg bg-red-600 px-4 py-2 text-white shadow-md transition-colors hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600">
				<span>‚èπÔ∏è</span>
				<span>Stop</span>
			</button>
		</div>

		<div
			id="blog-content"
			class="prose prose-gray dark:prose-invert prose-base md:prose-lg lg:prose-xl container max-w-none">
			<Content />
		</div>
	</Section>
</Layout>
<script>
	// Global state to prevent multiple initializations
	let isInitialized = false
	let cleanup: (() => void) | null = null

	// Initialize functionality immediately and on page load
	function initializeBlogFeatures() {
		// Prevent multiple initializations
		if (isInitialized) {
			return cleanup
		}

		// Wait for DOM to be fully ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', () => {
				setTimeout(() => initializeBlogFeatures(), 100)
			})
			return null
		}

		let voices = []
		let selectedVoice: SpeechSynthesisVoice | null = null
		const readBtn = document.getElementById('read-aloud-btn')
		const stopBtn = document.getElementById('stop-aloud-btn')
		const content = document.getElementById('blog-content')
		const iconSpan = document.getElementById('read-aloud-icon')
		const labelSpan = document.getElementById('read-aloud-label')

		// Check if all required elements exist
		if (!readBtn || !stopBtn || !content || !iconSpan || !labelSpan) {
			console.warn('Text-to-speech elements not found, retrying in 500ms')
			setTimeout(() => {
				isInitialized = false
				initializeBlogFeatures()
			}, 500)
			return null
		}

		const progressBar = document.getElementById('progress-bar')
		const blogContent = document.getElementById('blog-content')
		const progressPercent = document.getElementById('progress-percent')

		// Progress bar functionality
		function updateProgressBar() {
			if (!blogContent || !progressBar || !progressPercent) return

			const rect = blogContent.getBoundingClientRect()
			const scrollTop = window.scrollY || window.pageYOffset
			const contentTop = rect.top + scrollTop
			const contentHeight = blogContent.offsetHeight
			const windowHeight = window.innerHeight

			// Calculate progress based on how much of the content has been scrolled through
			const contentStart = contentTop
			const contentEnd = contentTop + contentHeight - windowHeight
			const scrollProgress = Math.max(0, scrollTop - contentStart)
			const maxScroll = Math.max(1, contentEnd - contentStart)
			const percent = Math.min(
				100,
				Math.max(0, (scrollProgress / maxScroll) * 100),
			)

			progressBar.style.width = percent + '%'
			progressPercent.textContent = `${Math.round(percent)}%`
		}

		// Add scroll listeners
		const handleScroll = () => updateProgressBar()
		const handleResize = () => updateProgressBar()

		window.addEventListener('scroll', handleScroll)
		window.addEventListener('resize', handleResize)

		// Initial update
		updateProgressBar()

		// Load voices for text-to-speech
		function loadVoices() {
			voices = window.speechSynthesis.getVoices()

			// Filter for English voices
			const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))

			// Try to find a preferred voice - prioritize Google voices for better quality
			selectedVoice =
				englishVoices.find(
					voice =>
						voice.name.includes('Google') &&
						voice.name.includes('Female') &&
						voice.name.includes('US'),
				) ||
				englishVoices.find(
					voice => voice.name.includes('Google') && voice.name.includes('US'),
				) ||
				englishVoices.find(voice => voice.name.includes('Google')) ||
				englishVoices.find(voice => voice.default) ||
				englishVoices[0]

			console.log('Selected voice:', selectedVoice)
		}

		// Load voices when available
		if (window.speechSynthesis) {
			if (window.speechSynthesis.getVoices().length === 0) {
				window.speechSynthesis.onvoiceschanged = loadVoices
			} else {
				loadVoices()
			}
		}

		// Text-to-speech functionality
		if (!readBtn || !stopBtn || !content) {
			console.warn('Text-to-speech elements not found')
			isInitialized = true
			return () => {
				window.removeEventListener('scroll', handleScroll)
				window.removeEventListener('resize', handleResize)
			}
		}

		let utterance: SpeechSynthesisUtterance | null = null
		let isPlaying = false
		let isPaused = false

		function updateUI() {
			if (!readBtn || !stopBtn || !iconSpan || !labelSpan) return

			if (isPlaying) {
				iconSpan.textContent = isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'
				labelSpan.textContent = isPaused ? 'Resume' : 'Pause'
				stopBtn.style.display = 'flex' // Use flex to match button styling
			} else {
				iconSpan.textContent = '‚ñ∂Ô∏è'
				labelSpan.textContent = 'Read Aloud'
				stopBtn.style.display = 'none'
			}
		}

		// Clean up any existing speech synthesis
		if (window.speechSynthesis.speaking) {
			window.speechSynthesis.cancel()
		}

		const handleReadClick = () => {
			console.log(
				'Read button clicked, isPlaying:',
				isPlaying,
				'isPaused:',
				isPaused,
			)

			if (!isPlaying) {
				// Start reading
				window.speechSynthesis.cancel()
				const text = content.innerText
				utterance = new window.SpeechSynthesisUtterance(text)

				if (selectedVoice) {
					utterance.voice = selectedVoice
				}
				utterance.lang = 'en-US'
				utterance.rate = 0.9
				utterance.pitch = 1
				utterance.volume = 0.8

				utterance.onstart = () => {
					console.log('Speech started')
					isPlaying = true
					isPaused = false
					updateUI()
				}

				utterance.onend = () => {
					console.log('Speech ended')
					isPlaying = false
					isPaused = false
					updateUI()
				}

				utterance.onerror = event => {
					console.log('Speech error:', event)
					isPlaying = false
					isPaused = false
					updateUI()
				}

				utterance.onpause = () => {
					console.log('Speech paused')
					isPaused = true
					updateUI()
				}

				utterance.onresume = () => {
					console.log('Speech resumed')
					isPaused = false
					updateUI()
				}

				window.speechSynthesis.speak(utterance)
				// Set state immediately and update UI
				isPlaying = true
				isPaused = false
				updateUI()
			} else if (
				window.speechSynthesis.speaking &&
				!window.speechSynthesis.paused
			) {
				// Pause reading
				window.speechSynthesis.pause()
				isPaused = true
				updateUI()
			} else if (window.speechSynthesis.paused) {
				// Resume reading
				window.speechSynthesis.resume()
				isPaused = false
				updateUI()
			}
		}

		const handleStopClick = () => {
			console.log('Stop button clicked')
			window.speechSynthesis.cancel()
			isPlaying = false
			isPaused = false
			updateUI()
		}

		// Add event listeners
		readBtn.addEventListener('click', handleReadClick)
		stopBtn.addEventListener('click', handleStopClick)

		// Initialize UI
		updateUI()
		isInitialized = true

		// Cleanup function for view transitions
		return () => {
			console.log('Cleaning up blog features')
			window.removeEventListener('scroll', handleScroll)
			window.removeEventListener('resize', handleResize)

			// Remove event listeners
			readBtn.removeEventListener('click', handleReadClick)
			stopBtn.removeEventListener('click', handleStopClick)

			// Stop speech synthesis
			if (window.speechSynthesis.speaking) {
				window.speechSynthesis.cancel()
			}

			// Reset state
			isInitialized = false
		}
	}

	// Clean up before navigation
	document.addEventListener('astro:before-preparation', () => {
		console.log('Before navigation - cleaning up')
		if (cleanup) {
			cleanup()
			cleanup = null
		}
		// Force stop any ongoing speech synthesis
		if (typeof window !== 'undefined' && window.speechSynthesis) {
			if (window.speechSynthesis.speaking) {
				window.speechSynthesis.cancel()
			}
		}
		isInitialized = false
	})

	// Initialize on page load - with a slight delay to avoid conflicts
	document.addEventListener('astro:page-load', () => {
		console.log('Page loaded - initializing features')
		// Clean up previous instance if it exists
		if (cleanup) {
			cleanup()
		}
		// Initialize new instance with a delay to ensure DOM is ready
		setTimeout(() => {
			cleanup = initializeBlogFeatures()
		}, 150)
	})

	// Fallback for initial page load (no view transition)
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			setTimeout(() => {
				if (!isInitialized) {
					cleanup = initializeBlogFeatures()
				}
			}, 200)
		})
	} else {
		// DOM is already ready, but add a small delay to avoid conflicts
		setTimeout(() => {
			if (!isInitialized) {
				cleanup = initializeBlogFeatures()
			}
		}, 100)
	}
</script>
